package main

import (
	"bytes"
	_ "embed"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
)

//go:embed execve.bpf.o
var obj []byte

type Execve struct {
	SysEnterExecve *ebpf.Program `ebpf:"sys_enter_execve"`
	CommEvent      *ebpf.Map     `ebpf:"comm_event"`
}

func main() {

	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	spec, err := ebpf.LoadCollectionSpecFromReader(bytes.NewReader(obj))
	if err != nil {
		log.Fatal(err)
	}
	// ebpf.Assign
	obj := Execve{}
	// spec.
	if err := spec.LoadAndAssign(&obj, nil); err != nil {
		log.Fatal(err)
	}
	defer obj.CommEvent.Close()
	defer obj.SysEnterExecve.Close()

	kp, err := link.Tracepoint("syscalls", "sys_enter_execve", obj.SysEnterExecve, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer kp.Close()
	rb, err := ringbuf.NewReader(obj.CommEvent)
	if err != nil {
		log.Fatal(err)
	}

	go func() {
		<-stopper

		if err := rb.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()
	for {
		record, err := rb.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
		// callback(0, uint64(uintptr(unsafe.Pointer(&record.RawSample))), uint64(len(record.RawSample)))
		buf := record.RawSample
		pid := binary.LittleEndian.Uint32(buf[0:4])
		parent_proc := string(buf[4 : 4+16])
		command := string(buf[4+16 : 4+16+352])
		fmt.Printf("[%d] %s -> %s\n", pid, parent_proc, command)
	}
}
