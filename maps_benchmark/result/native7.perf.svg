<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>kfree (14,060,238 samples, 0.14%)</title><rect x="487.6" y="229" width="1.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="490.65" y="239.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (26,919,227 samples, 0.26%)</title><rect x="743.8" y="165" width="3.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="746.79" y="175.5" ></text>
</g>
<g >
<title>tick_sched_handle (1,618,968 samples, 0.02%)</title><rect x="541.2" y="85" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="544.18" y="95.5" ></text>
</g>
<g >
<title>should_failslab (5,895,094 samples, 0.06%)</title><rect x="588.2" y="197" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="591.20" y="207.5" ></text>
</g>
<g >
<title>path_put (14,439,637 samples, 0.14%)</title><rect x="1075.3" y="213" width="1.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1078.31" y="223.5" ></text>
</g>
<g >
<title>syscall_exit_work (410,193,597 samples, 4.03%)</title><rect x="1034.4" y="245" width="47.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1037.41" y="255.5" >sysc..</text>
</g>
<g >
<title>__rcu_read_lock (8,118,049 samples, 0.08%)</title><rect x="389.9" y="229" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="392.88" y="239.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (20,836,352 samples, 0.20%)</title><rect x="581.6" y="197" width="2.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="584.57" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (7,321,338,124 samples, 71.97%)</title><rect x="236.6" y="277" width="849.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="239.63" y="287.5" >do_syscall_64</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,618,968 samples, 0.02%)</title><rect x="541.2" y="165" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="544.18" y="175.5" ></text>
</g>
<g >
<title>dput (6,629,340 samples, 0.07%)</title><rect x="1060.8" y="197" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1063.78" y="207.5" ></text>
</g>
<g >
<title>__kmem_cache_free (253,372,896 samples, 2.49%)</title><rect x="512.0" y="197" width="29.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="514.98" y="207.5" >__..</text>
</g>
<g >
<title>fpregs_assert_state_consistent (14,497,724 samples, 0.14%)</title><rect x="1030.7" y="229" width="1.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1033.74" y="239.5" ></text>
</g>
<g >
<title>get_timestamp (20,212,943 samples, 0.20%)</title><rect x="18.8" y="309" width="2.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="21.80" y="319.5" ></text>
</g>
<g >
<title>__cond_resched (6,642,560 samples, 0.07%)</title><rect x="713.5" y="181" width="0.7" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="716.46" y="191.5" ></text>
</g>
<g >
<title>memset_orig (36,336,645 samples, 0.36%)</title><rect x="584.0" y="197" width="4.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="586.99" y="207.5" ></text>
</g>
<g >
<title>__check_heap_object (28,776,657 samples, 0.28%)</title><rect x="622.1" y="213" width="3.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="625.11" y="223.5" ></text>
</g>
<g >
<title>all (10,172,852,706 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,618,968 samples, 0.02%)</title><rect x="541.2" y="117" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="544.18" y="127.5" ></text>
</g>
<g >
<title>vmemdup_user (23,077,246 samples, 0.23%)</title><rect x="806.9" y="245" width="2.7" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="809.87" y="255.5" ></text>
</g>
<g >
<title>_copy_to_user (23,741,459 samples, 0.23%)</title><rect x="401.9" y="229" width="2.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="404.93" y="239.5" ></text>
</g>
<g >
<title>kvmalloc_node (543,341,969 samples, 5.34%)</title><rect x="702.2" y="213" width="63.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="705.21" y="223.5" >kvmall..</text>
</g>
<g >
<title>kvmalloc_node (430,716,830 samples, 4.23%)</title><rect x="541.4" y="229" width="49.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="544.37" y="239.5" >kvmal..</text>
</g>
<g >
<title>syscall (9,645,350,714 samples, 94.81%)</title><rect x="70.0" y="309" width="1118.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="73.00" y="319.5" >syscall</text>
</g>
<g >
<title>audit_reset_context (274,728,418 samples, 2.70%)</title><rect x="1041.1" y="213" width="31.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1044.07" y="223.5" >au..</text>
</g>
<g >
<title>__check_object_size (53,220,726 samples, 0.52%)</title><rect x="251.0" y="245" width="6.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="254.03" y="255.5" ></text>
</g>
<g >
<title>main (421,120,733 samples, 4.14%)</title><rect x="21.1" y="309" width="48.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.15" y="319.5" >main</text>
</g>
<g >
<title>__kmem_cache_alloc_node (285,083,689 samples, 2.80%)</title><rect x="714.2" y="181" width="33.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="717.23" y="191.5" >__..</text>
</g>
<g >
<title>should_failslab (5,874,392 samples, 0.06%)</title><rect x="576.7" y="181" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="579.72" y="191.5" ></text>
</g>
<g >
<title>update_process_times (1,647,809 samples, 0.02%)</title><rect x="833.6" y="133" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="836.63" y="143.5" ></text>
</g>
<g >
<title>kmalloc_slab (35,902,214 samples, 0.35%)</title><rect x="577.4" y="197" width="4.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="580.41" y="207.5" ></text>
</g>
<g >
<title>__kmalloc_node (375,776,271 samples, 3.69%)</title><rect x="545.3" y="213" width="43.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="548.30" y="223.5" >__km..</text>
</g>
<g >
<title>kmalloc_slab (15,594,303 samples, 0.15%)</title><rect x="763.4" y="197" width="1.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="766.43" y="207.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (10,302,457 samples, 0.10%)</title><rect x="499.4" y="213" width="1.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="502.38" y="223.5" ></text>
</g>
<g >
<title>memset_orig (60,875,512 samples, 0.60%)</title><rect x="754.3" y="181" width="7.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="757.31" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (3,048,138 samples, 0.03%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.64" y="319.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,647,809 samples, 0.02%)</title><rect x="833.6" y="165" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="836.63" y="175.5" ></text>
</g>
<g >
<title>kfree (20,498,719 samples, 0.20%)</title><rect x="1072.9" y="213" width="2.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1075.94" y="223.5" ></text>
</g>
<g >
<title>migrate_enable (19,352,094 samples, 0.19%)</title><rect x="596.9" y="229" width="2.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="599.88" y="239.5" ></text>
</g>
<g >
<title>_copy_from_user (23,189,544 samples, 0.23%)</title><rect x="695.0" y="213" width="2.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="698.00" y="223.5" ></text>
</g>
<g >
<title>__kmalloc_node (17,367,683 samples, 0.17%)</title><rect x="691.3" y="213" width="2.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="694.26" y="223.5" ></text>
</g>
<g >
<title>update_process_times (1,618,968 samples, 0.02%)</title><rect x="541.2" y="69" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="544.18" y="79.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (49,196,701 samples, 0.48%)</title><rect x="30.4" y="293" width="5.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="33.44" y="303.5" ></text>
</g>
<g >
<title>migrate_disable (28,197,333 samples, 0.28%)</title><rect x="593.6" y="229" width="3.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="596.61" y="239.5" ></text>
</g>
<g >
<title>rep_movs_alternative (91,504,621 samples, 0.90%)</title><rect x="599.1" y="229" width="10.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="602.12" y="239.5" ></text>
</g>
<g >
<title>__fdget (93,694,094 samples, 0.92%)</title><rect x="374.5" y="229" width="10.8" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="377.48" y="239.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,689,385 samples, 0.02%)</title><rect x="804.1" y="197" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="807.15" y="207.5" ></text>
</g>
<g >
<title>check_stack_object (52,200,068 samples, 0.51%)</title><rect x="368.4" y="213" width="6.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="371.42" y="223.5" ></text>
</g>
<g >
<title>__kmalloc_node (13,085,568 samples, 0.13%)</title><rect x="388.4" y="229" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="391.36" y="239.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,618,968 samples, 0.02%)</title><rect x="541.2" y="149" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="544.18" y="159.5" ></text>
</g>
<g >
<title>kvfree (449,086,697 samples, 4.41%)</title><rect x="489.3" y="229" width="52.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="492.28" y="239.5" >kvfree</text>
</g>
<g >
<title>syscall_exit_to_user_mode (34,517,811 samples, 0.34%)</title><rect x="1091.7" y="277" width="4.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1094.73" y="287.5" ></text>
</g>
<g >
<title>memcmp (53,319,652 samples, 0.52%)</title><rect x="455.6" y="197" width="6.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="458.58" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,048,138 samples, 0.03%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.64" y="303.5" ></text>
</g>
<g >
<title>bpf_map_value_size (41,599,582 samples, 0.41%)</title><rect x="779.8" y="245" width="4.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="782.84" y="255.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (185,178,310 samples, 1.82%)</title><rect x="440.3" y="213" width="21.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="443.28" y="223.5" >h..</text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (250,297,362 samples, 2.46%)</title><rect x="36.1" y="293" width="29.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="39.14" y="303.5" >cl..</text>
</g>
<g >
<title>__x86_indirect_thunk_array (7,489,150 samples, 0.07%)</title><rect x="235.8" y="277" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="238.76" y="287.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (276,016,248 samples, 2.71%)</title><rect x="816.8" y="261" width="32.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="819.82" y="271.5" >sy..</text>
</g>
<g >
<title>__kmem_cache_alloc_node (14,349,429 samples, 0.14%)</title><rect x="761.8" y="197" width="1.6" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="764.76" y="207.5" ></text>
</g>
<g >
<title>memcpy_orig (15,576,156 samples, 0.15%)</title><rect x="591.8" y="229" width="1.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="594.80" y="239.5" ></text>
</g>
<g >
<title>__virt_addr_valid (68,502,079 samples, 0.67%)</title><rect x="360.5" y="213" width="7.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="363.48" y="223.5" ></text>
</g>
<g >
<title>__fget_light (93,694,094 samples, 0.92%)</title><rect x="374.5" y="213" width="10.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="377.48" y="223.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (7,364,875 samples, 0.07%)</title><rect x="394.0" y="229" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="397.02" y="239.5" ></text>
</g>
<g >
<title>__check_heap_object (65,979,292 samples, 0.65%)</title><rect x="352.8" y="213" width="7.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="355.82" y="223.5" ></text>
</g>
<g >
<title>_copy_to_user (30,432,756 samples, 0.30%)</title><rect x="768.5" y="245" width="3.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="771.47" y="255.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (545,161,877 samples, 5.36%)</title><rect x="404.8" y="229" width="63.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="407.78" y="239.5" >bpf_ma..</text>
</g>
<g >
<title>bpf_prog_load (1,537,493 samples, 0.02%)</title><rect x="1189.6" y="245" width="0.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1192.64" y="255.5" ></text>
</g>
<g >
<title>rep_movs_alternative (17,419,755 samples, 0.17%)</title><rect x="765.2" y="213" width="2.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="768.24" y="223.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (21,969,562 samples, 0.22%)</title><rect x="1083.3" y="261" width="2.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1086.32" y="271.5" ></text>
</g>
<g >
<title>mntput (7,316,582 samples, 0.07%)</title><rect x="1065.2" y="197" width="0.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1068.22" y="207.5" ></text>
</g>
<g >
<title>unroll_tree_refs (33,803,162 samples, 0.33%)</title><rect x="1069.0" y="197" width="3.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1072.02" y="207.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (27,507,151 samples, 0.27%)</title><rect x="573.5" y="181" width="3.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="576.53" y="191.5" ></text>
</g>
<g >
<title>__check_object_size (425,547,024 samples, 4.18%)</title><rect x="325.1" y="229" width="49.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="328.12" y="239.5" >__ch..</text>
</g>
<g >
<title>bpf_map_copy_value (12,113,500 samples, 0.12%)</title><rect x="778.4" y="245" width="1.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="781.43" y="255.5" ></text>
</g>
<g >
<title>check_stack_object (103,350,429 samples, 1.02%)</title><rect x="468.0" y="229" width="12.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="471.02" y="239.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (36,095,884 samples, 0.35%)</title><rect x="1095.7" y="293" width="4.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1098.73" y="303.5" ></text>
</g>
<g >
<title>kmalloc_slab (51,602,996 samples, 0.51%)</title><rect x="747.3" y="181" width="6.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="750.29" y="191.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (22,749,197 samples, 0.22%)</title><rect x="480.0" y="229" width="2.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="483.00" y="239.5" ></text>
</g>
<g >
<title>__libc_start_call_main (10,167,028,633 samples, 99.94%)</title><rect x="10.1" y="325" width="1179.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.13" y="335.5" >__libc_start_call_main</text>
</g>
<g >
<title>__cond_resched (7,326,168 samples, 0.07%)</title><rect x="550.8" y="197" width="0.8" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="553.78" y="207.5" ></text>
</g>
<g >
<title>unroll_tree_refs (26,879,106 samples, 0.26%)</title><rect x="1077.0" y="213" width="3.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1079.99" y="223.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (64,993,012 samples, 0.64%)</title><rect x="448.0" y="197" width="7.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="451.04" y="207.5" ></text>
</g>
<g >
<title>__check_heap_object (19,436,854 samples, 0.19%)</title><rect x="322.9" y="229" width="2.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="325.86" y="239.5" ></text>
</g>
<g >
<title>syscall@plt (5,588,124 samples, 0.05%)</title><rect x="1188.8" y="309" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1191.81" y="319.5" ></text>
</g>
<g >
<title>path_put (25,408,623 samples, 0.25%)</title><rect x="1066.1" y="197" width="2.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1069.07" y="207.5" ></text>
</g>
<g >
<title>_copy_from_user (60,811,371 samples, 0.60%)</title><rect x="394.9" y="229" width="7.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="397.88" y="239.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (43,139,738 samples, 0.42%)</title><rect x="482.6" y="229" width="5.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="485.64" y="239.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (174,845,551 samples, 1.72%)</title><rect x="44.9" y="277" width="20.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="47.90" y="287.5" ></text>
</g>
<g >
<title>migrate_enable (47,494,945 samples, 0.47%)</title><rect x="462.5" y="213" width="5.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="465.51" y="223.5" ></text>
</g>
<g >
<title>__virt_addr_valid (11,924,576 samples, 0.12%)</title><rect x="392.6" y="229" width="1.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="395.64" y="239.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,010,007,665 samples, 19.76%)</title><rect x="848.8" y="261" width="233.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="851.84" y="271.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>[unknown] (1,143,549 samples, 0.01%)</title><rect x="10.0" y="325" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>__fget_light (26,030,021 samples, 0.26%)</title><rect x="385.3" y="229" width="3.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="388.34" y="239.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,647,809 samples, 0.02%)</title><rect x="833.6" y="181" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="836.63" y="191.5" ></text>
</g>
<g >
<title>__fdget (21,434,701 samples, 0.21%)</title><rect x="257.2" y="245" width="2.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="260.20" y="255.5" ></text>
</g>
<g >
<title>security_bpf (21,826,798 samples, 0.21%)</title><rect x="804.3" y="245" width="2.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="807.34" y="255.5" ></text>
</g>
<g >
<title>__virt_addr_valid (14,892,299 samples, 0.15%)</title><rect x="693.3" y="213" width="1.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="696.27" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,618,968 samples, 0.02%)</title><rect x="541.2" y="133" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="544.18" y="143.5" ></text>
</g>
<g >
<title>vmemdup_user (1,333,336,750 samples, 13.11%)</title><rect x="612.6" y="229" width="154.7" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="615.60" y="239.5" >vmemdup_user</text>
</g>
<g >
<title>scheduler_tick (1,618,968 samples, 0.02%)</title><rect x="541.2" y="53" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="544.18" y="63.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (4,816,496,576 samples, 47.35%)</title><rect x="250.9" y="261" width="558.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="253.86" y="271.5" >__x64_sys_bpf</text>
</g>
<g >
<title>__virt_addr_valid (252,447,037 samples, 2.48%)</title><rect x="662.0" y="197" width="29.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="664.98" y="207.5" >__..</text>
</g>
<g >
<title>__rcu_read_lock (4,088,008 samples, 0.04%)</title><rect x="421.2" y="213" width="0.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="424.18" y="223.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (765,527,093 samples, 7.53%)</title><rect x="1100.0" y="293" width="88.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1103.01" y="303.5" >syscall_re..</text>
</g>
<g >
<title>dl_main (867,264 samples, 0.01%)</title><rect x="1189.5" y="293" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1192.46" y="303.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (6,414,831 samples, 0.06%)</title><rect x="461.8" y="213" width="0.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="464.76" y="223.5" ></text>
</g>
<g >
<title>security_bpf (24,656,288 samples, 0.24%)</title><rect x="609.7" y="229" width="2.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="612.74" y="239.5" ></text>
</g>
<g >
<title>__sys_bpf (3,048,138 samples, 0.03%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.64" y="271.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (15,638,057 samples, 0.15%)</title><rect x="390.8" y="229" width="1.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="393.82" y="239.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (22,160,367 samples, 0.22%)</title><rect x="814.3" y="261" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="817.25" y="271.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (17,100,492 samples, 0.17%)</title><rect x="1032.4" y="245" width="2.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1035.43" y="255.5" ></text>
</g>
<g >
<title>_copy_from_user (10,484,145 samples, 0.10%)</title><rect x="767.3" y="245" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="770.26" y="255.5" ></text>
</g>
<g >
<title>task_tick_fair (1,618,968 samples, 0.02%)</title><rect x="541.2" y="37" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="544.18" y="47.5" ></text>
</g>
<g >
<title>__check_object_size (567,367,399 samples, 5.58%)</title><rect x="625.4" y="213" width="65.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="628.45" y="223.5" >__check..</text>
</g>
<g >
<title>__audit_syscall_exit (348,371,857 samples, 3.42%)</title><rect x="1039.7" y="229" width="40.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1042.70" y="239.5" >__a..</text>
</g>
<g >
<title>audit_reset_context (16,239,143 samples, 0.16%)</title><rect x="1080.1" y="229" width="1.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1083.11" y="239.5" ></text>
</g>
<g >
<title>__kmem_cache_free (47,225,287 samples, 0.46%)</title><rect x="493.9" y="213" width="5.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="496.91" y="223.5" ></text>
</g>
<g >
<title>bpf_map_lookup_elem (74,756,119 samples, 0.73%)</title><rect x="10.1" y="309" width="8.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.13" y="319.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,689,385 samples, 0.02%)</title><rect x="804.1" y="229" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="807.15" y="239.5" ></text>
</g>
<g >
<title>kfree (31,639,488 samples, 0.31%)</title><rect x="1061.5" y="197" width="3.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1064.55" y="207.5" ></text>
</g>
<g >
<title>check_stack_object (24,995,942 samples, 0.25%)</title><rect x="697.7" y="213" width="2.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="700.69" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (23,184,207 samples, 0.23%)</title><rect x="84.5" y="293" width="2.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="87.52" y="303.5" ></text>
</g>
<g >
<title>_dl_relocate_object (867,264 samples, 0.01%)</title><rect x="1189.5" y="277" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1192.46" y="287.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (15,673,949 samples, 0.15%)</title><rect x="1025.0" y="245" width="1.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1028.04" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (1,647,809 samples, 0.02%)</title><rect x="833.6" y="117" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="836.63" y="127.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (222,171,717 samples, 2.18%)</title><rect x="551.6" y="197" width="25.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="554.63" y="207.5" >_..</text>
</g>
<g >
<title>syscall_exit_work (11,450,802 samples, 0.11%)</title><rect x="1082.0" y="261" width="1.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1084.99" y="271.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,689,385 samples, 0.02%)</title><rect x="804.1" y="213" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="807.15" y="223.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (49,219,661 samples, 0.48%)</title><rect x="843.1" y="229" width="5.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="846.13" y="239.5" ></text>
</g>
<g >
<title>__sys_bpf (21,817,662 samples, 0.21%)</title><rect x="248.3" y="261" width="2.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="251.33" y="271.5" ></text>
</g>
<g >
<title>map_benchmark (10,172,783,374 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >map_benchmark</text>
</g>
<g >
<title>syscall_enter_from_user_mode (50,511,783 samples, 0.50%)</title><rect x="1085.9" y="277" width="5.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1088.87" y="287.5" ></text>
</g>
<g >
<title>get_timestamp (24,907,966 samples, 0.24%)</title><rect x="67.1" y="293" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="70.11" y="303.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,499,741 samples, 0.02%)</title><rect x="833.6" y="197" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="836.63" y="207.5" ></text>
</g>
<g >
<title>_dl_start_user (867,264 samples, 0.01%)</title><rect x="1189.5" y="325" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1192.46" y="335.5" ></text>
</g>
<g >
<title>should_failslab (3,319,727 samples, 0.03%)</title><rect x="746.9" y="165" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="749.91" y="175.5" ></text>
</g>
<g >
<title>__kmalloc_node (481,656,416 samples, 4.73%)</title><rect x="705.9" y="197" width="55.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="708.89" y="207.5" >__kma..</text>
</g>
<g >
<title>memchr_inv (135,781,115 samples, 1.33%)</title><rect x="788.6" y="245" width="15.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="791.59" y="255.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (13,987,256 samples, 0.14%)</title><rect x="700.6" y="213" width="1.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="703.59" y="223.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (8,892,205 samples, 0.09%)</title><rect x="753.3" y="181" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="756.28" y="191.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (867,264 samples, 0.01%)</title><rect x="1189.5" y="309" width="0.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1192.46" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (35,951,086 samples, 0.35%)</title><rect x="231.6" y="277" width="4.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="234.59" y="287.5" ></text>
</g>
<g >
<title>__sys_bpf (4,375,801,907 samples, 43.01%)</title><rect x="259.7" y="245" width="507.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="262.69" y="255.5" >__sys_bpf</text>
</g>
<g >
<title>__x64_sys_bpf (3,048,138 samples, 0.03%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.64" y="287.5" ></text>
</g>
<g >
<title>syscall (3,048,138 samples, 0.03%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.64" y="335.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (48,014,199 samples, 0.47%)</title><rect x="1026.9" y="245" width="5.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1029.86" y="255.5" ></text>
</g>
<g >
<title>kvmalloc_node (11,588,703 samples, 0.11%)</title><rect x="787.2" y="245" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="790.25" y="255.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (52,093,951 samples, 0.51%)</title><rect x="827.6" y="245" width="6.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="830.59" y="255.5" ></text>
</g>
<g >
<title>amd_clear_divider (40,525,564 samples, 0.40%)</title><rect x="809.6" y="261" width="4.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="812.55" y="271.5" ></text>
</g>
<g >
<title>__check_heap_object (192,878,803 samples, 1.90%)</title><rect x="639.6" y="197" width="22.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="642.60" y="207.5" >_..</text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (128,622,212 samples, 1.26%)</title><rect x="833.9" y="245" width="14.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="836.92" y="255.5" ></text>
</g>
<g >
<title>memcpy (4,047,219 samples, 0.04%)</title><rect x="591.3" y="229" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="594.33" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,618,968 samples, 0.02%)</title><rect x="541.2" y="181" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="544.18" y="191.5" ></text>
</g>
<g >
<title>clock_gettime@plt (16,630,873 samples, 0.16%)</title><rect x="65.2" y="293" width="1.9" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="68.18" y="303.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (10,701,666 samples, 0.11%)</title><rect x="588.9" y="213" width="1.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="591.89" y="223.5" ></text>
</g>
<g >
<title>map_create (1,510,645 samples, 0.01%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.82" y="255.5" ></text>
</g>
<g >
<title>kfree (351,670,228 samples, 3.46%)</title><rect x="500.6" y="213" width="40.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="503.58" y="223.5" >kfree</text>
</g>
<g >
<title>kmalloc_slab (10,386,893 samples, 0.10%)</title><rect x="590.1" y="213" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="593.13" y="223.5" ></text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (55,424,285 samples, 0.54%)</title><rect x="772.0" y="245" width="6.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="775.00" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,499,741 samples, 0.02%)</title><rect x="833.6" y="213" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="836.63" y="223.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,499,741 samples, 0.02%)</title><rect x="833.6" y="229" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="836.63" y="239.5" ></text>
</g>
<g >
<title>htab_map_alloc (1,510,645 samples, 0.01%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.82" y="239.5" ></text>
</g>
<g >
<title>htab_map_hash (160,576,479 samples, 1.58%)</title><rect x="421.7" y="213" width="18.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="424.66" y="223.5" ></text>
</g>
<g >
<title>tick_sched_handle (1,647,809 samples, 0.02%)</title><rect x="833.6" y="149" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="836.63" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,694,499,430 samples, 85.47%)</title><rect x="87.2" y="293" width="1008.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="90.21" y="303.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,499,741 samples, 0.02%)</title><rect x="833.6" y="245" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="836.63" y="255.5" ></text>
</g>
<g >
<title>should_failslab (3,372,456 samples, 0.03%)</title><rect x="761.4" y="181" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="764.37" y="191.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,689,385 samples, 0.02%)</title><rect x="804.1" y="181" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="807.15" y="191.5" ></text>
</g>
<g >
<title>kvfree (22,293,296 samples, 0.22%)</title><rect x="784.7" y="245" width="2.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="787.66" y="255.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,618,968 samples, 0.02%)</title><rect x="541.2" y="101" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="544.18" y="111.5" ></text>
</g>
</g>
</svg>
