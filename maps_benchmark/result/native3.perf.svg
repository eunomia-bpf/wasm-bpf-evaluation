<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>__audit_syscall_exit (9,223,910 samples, 0.09%)</title><rect x="1033.9" y="165" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1036.88" y="175.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,645,119 samples, 0.02%)</title><rect x="428.5" y="69" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="431.48" y="79.5" ></text>
</g>
<g >
<title>unroll_tree_refs (15,005,409 samples, 0.14%)</title><rect x="1081.4" y="117" width="1.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1084.43" y="127.5" ></text>
</g>
<g >
<title>tick_sched_handle (1,654,343 samples, 0.02%)</title><rect x="831.1" y="69" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="834.12" y="79.5" ></text>
</g>
<g >
<title>amd_clear_divider (38,472,731 samples, 0.37%)</title><rect x="819.1" y="181" width="4.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="822.12" y="191.5" ></text>
</g>
<g >
<title>memchr_inv (143,774,955 samples, 1.38%)</title><rect x="798.0" y="165" width="16.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="801.04" y="175.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (4,224,085 samples, 0.04%)</title><rect x="90.2" y="149" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="93.18" y="159.5" ></text>
</g>
<g >
<title>_copy_from_user (27,625,289 samples, 0.26%)</title><rect x="704.0" y="133" width="3.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="707.05" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (6,734,300 samples, 0.06%)</title><rect x="90.2" y="213" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="93.18" y="223.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (2,511,672 samples, 0.02%)</title><rect x="237.2" y="197" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="240.21" y="207.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,645,119 samples, 0.02%)</title><rect x="428.5" y="101" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="431.48" y="111.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (13,481,037 samples, 0.13%)</title><rect x="1095.7" y="181" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1098.71" y="191.5" ></text>
</g>
<g >
<title>rep_movs_alternative (13,264,054 samples, 0.13%)</title><rect x="779.6" y="133" width="1.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="782.57" y="143.5" ></text>
</g>
<g >
<title>__kmem_cache_free (42,450,402 samples, 0.41%)</title><rect x="516.6" y="133" width="4.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="519.61" y="143.5" ></text>
</g>
<g >
<title>get_timestamp (25,231,234 samples, 0.24%)</title><rect x="71.0" y="213" width="2.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="74.05" y="223.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (34,370,678 samples, 0.33%)</title><rect x="756.7" y="85" width="3.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="759.66" y="95.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (346,613,519 samples, 3.32%)</title><rect x="721.7" y="101" width="39.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="724.65" y="111.5" >__k..</text>
</g>
<g >
<title>migrate_enable (19,290,189 samples, 0.18%)</title><rect x="612.7" y="149" width="2.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="615.69" y="159.5" ></text>
</g>
<g >
<title>kvfree (15,880,835 samples, 0.15%)</title><rect x="794.9" y="165" width="1.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="797.91" y="175.5" ></text>
</g>
<g >
<title>__sys_bpf (4,620,444,977 samples, 44.26%)</title><rect x="258.8" y="165" width="522.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="261.83" y="175.5" >__sys_bpf</text>
</g>
<g >
<title>_copy_to_user (11,678,963 samples, 0.11%)</title><rect x="427.1" y="149" width="1.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="430.06" y="159.5" ></text>
</g>
<g >
<title>all (10,440,004,241 samples, 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,645,119 samples, 0.02%)</title><rect x="428.5" y="117" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="431.48" y="127.5" ></text>
</g>
<g >
<title>clock_gettime@plt (16,574,044 samples, 0.16%)</title><rect x="69.2" y="213" width="1.8" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="72.18" y="223.5" ></text>
</g>
<g >
<title>__libc_start_call_main (10,432,606,141 samples, 99.93%)</title><rect x="10.3" y="245" width="1179.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.33" y="255.5" >__libc_start_call_main</text>
</g>
<g >
<title>__fdget (19,974,478 samples, 0.19%)</title><rect x="256.6" y="165" width="2.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="259.57" y="175.5" ></text>
</g>
<g >
<title>__virt_addr_valid (28,544,262 samples, 0.27%)</title><rect x="417.3" y="149" width="3.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="420.25" y="159.5" ></text>
</g>
<g >
<title>bpf_map_value_size (30,913,632 samples, 0.30%)</title><rect x="791.4" y="165" width="3.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="794.42" y="175.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,645,119 samples, 0.02%)</title><rect x="428.5" y="133" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="431.48" y="143.5" ></text>
</g>
<g >
<title>vmemdup_user (23,552,601 samples, 0.23%)</title><rect x="816.5" y="165" width="2.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="819.46" y="175.5" ></text>
</g>
<g >
<title>__rcu_read_lock (6,569,675 samples, 0.06%)</title><rect x="414.5" y="149" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="417.52" y="159.5" ></text>
</g>
<g >
<title>kmalloc_slab (9,166,260 samples, 0.09%)</title><rect x="605.2" y="133" width="1.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="608.24" y="143.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (41,169,523 samples, 0.39%)</title><rect x="1034.9" y="165" width="4.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1037.92" y="175.5" ></text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (35,905,897 samples, 0.34%)</title><rect x="785.9" y="165" width="4.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="788.86" y="175.5" ></text>
</g>
<g >
<title>memcpy (5,052,263 samples, 0.05%)</title><rect x="606.3" y="149" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="609.27" y="159.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (22,608,111 samples, 0.22%)</title><rect x="1097.2" y="197" width="2.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1100.23" y="207.5" ></text>
</g>
<g >
<title>map_benchmark (10,439,940,643 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >map_benchmark</text>
</g>
<g >
<title>timekeeping_advance (2,546,811 samples, 0.02%)</title><rect x="90.2" y="69" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="93.18" y="79.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (15,948,530 samples, 0.15%)</title><rect x="829.3" y="165" width="1.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="832.32" y="175.5" ></text>
</g>
<g >
<title>kfree (326,620,869 samples, 3.13%)</title><rect x="523.2" y="133" width="36.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="526.20" y="143.5" >kfree</text>
</g>
<g >
<title>irq_exit_rcu (1,685,863 samples, 0.02%)</title><rect x="831.3" y="133" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="834.31" y="143.5" ></text>
</g>
<g >
<title>__kmalloc_node (29,347,479 samples, 0.28%)</title><rect x="698.8" y="133" width="3.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="701.84" y="143.5" ></text>
</g>
<g >
<title>_copy_from_user (54,962,364 samples, 0.53%)</title><rect x="420.9" y="149" width="6.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="423.85" y="159.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (6,734,300 samples, 0.06%)</title><rect x="90.2" y="197" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="93.18" y="207.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (421,056,538 samples, 4.03%)</title><rect x="1045.2" y="149" width="47.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1048.18" y="159.5" >__au..</text>
</g>
<g >
<title>tick_sched_handle (1,677,274 samples, 0.02%)</title><rect x="90.5" y="117" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="93.46" y="127.5" ></text>
</g>
<g >
<title>memset_orig (51,866,046 samples, 0.50%)</title><rect x="769.7" y="101" width="5.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="772.65" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2,546,811 samples, 0.02%)</title><rect x="90.2" y="53" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="93.18" y="63.5" ></text>
</g>
<g >
<title>kmalloc_slab (11,777,791 samples, 0.11%)</title><rect x="778.2" y="117" width="1.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="781.24" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (27,580,555 samples, 0.26%)</title><rect x="90.9" y="213" width="3.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="93.94" y="223.5" ></text>
</g>
<g >
<title>__fget_light (17,504,733 samples, 0.17%)</title><rect x="411.0" y="149" width="2.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="414.04" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (5,021,960,828 samples, 48.10%)</title><rect x="251.5" y="181" width="567.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="254.50" y="191.5" >__x64_sys_bpf</text>
</g>
<g >
<title>__cond_resched (10,678,948 samples, 0.10%)</title><rect x="572.1" y="117" width="1.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="575.13" y="127.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (27,719,510 samples, 0.27%)</title><rect x="766.5" y="101" width="3.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="769.52" y="111.5" ></text>
</g>
<g >
<title>syscall@plt (4,189,717 samples, 0.04%)</title><rect x="1189.0" y="229" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1192.02" y="239.5" ></text>
</g>
<g >
<title>syscall (2,214,421 samples, 0.02%)</title><rect x="1189.7" y="245" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.74" y="255.5" ></text>
</g>
<g >
<title>audit_reset_context (301,319,723 samples, 2.89%)</title><rect x="1049.1" y="133" width="34.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1052.07" y="143.5" >au..</text>
</g>
<g >
<title>htab_map_hash (145,177,741 samples, 1.39%)</title><rect x="443.7" y="133" width="16.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="446.71" y="143.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (15,879,156 samples, 0.15%)</title><rect x="521.4" y="133" width="1.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="524.41" y="143.5" ></text>
</g>
<g >
<title>scheduler_tick (1,677,274 samples, 0.02%)</title><rect x="90.5" y="85" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="93.46" y="95.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,654,343 samples, 0.02%)</title><rect x="831.1" y="101" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="834.12" y="111.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (21,759,608 samples, 0.21%)</title><rect x="481.2" y="133" width="2.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="484.16" y="143.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (5,904,439 samples, 0.06%)</title><rect x="1038.6" y="149" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1041.62" y="159.5" ></text>
</g>
<g >
<title>migrate_disable (34,273,141 samples, 0.33%)</title><rect x="608.8" y="149" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="611.82" y="159.5" ></text>
</g>
<g >
<title>should_failslab (2,417,304 samples, 0.02%)</title><rect x="775.5" y="101" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="778.51" y="111.5" ></text>
</g>
<g >
<title>memcpy_orig (17,465,513 samples, 0.17%)</title><rect x="606.8" y="149" width="2.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="609.84" y="159.5" ></text>
</g>
<g >
<title>audit_reset_context (14,230,755 samples, 0.14%)</title><rect x="1092.8" y="149" width="1.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1095.77" y="159.5" ></text>
</g>
<g >
<title>bpf_map_lookup_elem (92,068,910 samples, 0.88%)</title><rect x="10.3" y="229" width="10.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.33" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,654,343 samples, 0.02%)</title><rect x="831.1" y="117" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="834.12" y="127.5" ></text>
</g>
<g >
<title>__check_object_size (556,130,041 samples, 5.33%)</title><rect x="328.8" y="149" width="62.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="331.82" y="159.5" >__chec..</text>
</g>
<g >
<title>fpregs_assert_state_consistent (7,623,601 samples, 0.07%)</title><rect x="1039.6" y="165" width="0.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1042.58" y="175.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (528,894,223 samples, 5.07%)</title><rect x="428.7" y="149" width="59.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="431.66" y="159.5" >bpf_ma..</text>
</g>
<g >
<title>syscall_return_via_sysret (740,185,259 samples, 7.09%)</title><rect x="1105.4" y="213" width="83.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1108.36" y="223.5" >syscall_r..</text>
</g>
<g >
<title>path_put (16,690,177 samples, 0.16%)</title><rect x="1089.4" y="133" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1092.36" y="143.5" ></text>
</g>
<g >
<title>check_stack_object (21,788,778 samples, 0.21%)</title><rect x="707.2" y="133" width="2.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="710.17" y="143.5" ></text>
</g>
<g >
<title>kvmalloc_node (408,333,853 samples, 3.91%)</title><rect x="560.1" y="149" width="46.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="563.12" y="159.5" >kvma..</text>
</g>
<g >
<title>unroll_tree_refs (13,472,727 samples, 0.13%)</title><rect x="1091.2" y="133" width="1.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1094.25" y="143.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (5,054,605 samples, 0.05%)</title><rect x="90.2" y="181" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="93.18" y="191.5" ></text>
</g>
<g >
<title>__rcu_read_lock (5,052,828 samples, 0.05%)</title><rect x="443.1" y="133" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="446.13" y="143.5" ></text>
</g>
<g >
<title>kfree (55,134,398 samples, 0.53%)</title><rect x="1083.1" y="133" width="6.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1086.13" y="143.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (186,235,519 samples, 1.78%)</title><rect x="460.1" y="133" width="21.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="463.12" y="143.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (3,340,206 samples, 0.03%)</title><rect x="831.1" y="149" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="834.12" y="159.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (29,292,610 samples, 0.28%)</title><rect x="1102.0" y="213" width="3.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1105.04" y="223.5" ></text>
</g>
<g >
<title>__virt_addr_valid (97,062,742 samples, 0.93%)</title><rect x="374.8" y="133" width="10.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="377.76" y="143.5" ></text>
</g>
<g >
<title>main (449,607,411 samples, 4.31%)</title><rect x="23.1" y="229" width="50.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="26.08" y="239.5" >main</text>
</g>
<g >
<title>_copy_from_user (20,707,879 samples, 0.20%)</title><rect x="781.1" y="165" width="2.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="784.07" y="175.5" ></text>
</g>
<g >
<title>check_stack_object (50,146,641 samples, 0.48%)</title><rect x="385.7" y="133" width="5.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="388.73" y="143.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (181,451,258 samples, 1.74%)</title><rect x="48.7" y="197" width="20.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="51.67" y="207.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (17,589,931 samples, 0.17%)</title><rect x="415.3" y="149" width="2.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="418.26" y="159.5" ></text>
</g>
<g >
<title>__kmalloc_node (13,267,687 samples, 0.13%)</title><rect x="413.0" y="149" width="1.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="416.02" y="159.5" ></text>
</g>
<g >
<title>security_bpf (19,166,990 samples, 0.18%)</title><rect x="814.3" y="165" width="2.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="817.29" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (24,276,551 samples, 0.23%)</title><rect x="234.5" y="197" width="2.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="237.46" y="207.5" ></text>
</g>
<g >
<title>map_create (1,489,965 samples, 0.01%)</title><rect x="1189.8" y="165" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.82" y="175.5" ></text>
</g>
<g >
<title>__kmalloc_node (549,438,593 samples, 5.26%)</title><rect x="713.7" y="117" width="62.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="716.68" y="127.5" >__kmal..</text>
</g>
<g >
<title>lookup_nulls_elem_raw (59,397,013 samples, 0.57%)</title><rect x="468.3" y="117" width="6.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="471.32" y="127.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,485,115 samples, 0.02%)</title><rect x="428.4" y="149" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="431.38" y="159.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,654,343 samples, 0.02%)</title><rect x="831.1" y="133" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="834.12" y="143.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (141,588,482 samples, 1.36%)</title><rect x="831.5" y="165" width="16.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="834.50" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (7,606,547,435 samples, 72.86%)</title><rect x="237.5" y="197" width="859.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="240.49" y="207.5" >do_syscall_64</text>
</g>
<g >
<title>__vdso_clock_gettime (64,131,595 samples, 0.61%)</title><rect x="34.7" y="213" width="7.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="37.70" y="223.5" ></text>
</g>
<g >
<title>mntput (11,670,641 samples, 0.11%)</title><rect x="1077.0" y="117" width="1.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1080.01" y="127.5" ></text>
</g>
<g >
<title>__check_heap_object (129,353,538 samples, 1.24%)</title><rect x="360.1" y="133" width="14.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="363.14" y="143.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (30,006,171 samples, 0.29%)</title><rect x="844.1" y="149" width="3.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="847.11" y="159.5" ></text>
</g>
<g >
<title>__check_object_size (512,195,022 samples, 4.91%)</title><rect x="641.0" y="133" width="57.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="643.95" y="143.5" >__chec..</text>
</g>
<g >
<title>memset_orig (29,184,657 samples, 0.28%)</title><rect x="600.1" y="117" width="3.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="603.13" y="127.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (2,481,487 samples, 0.02%)</title><rect x="391.4" y="133" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="394.40" y="143.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (30,162,425 samples, 0.29%)</title><rect x="501.2" y="149" width="3.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="504.24" y="159.5" ></text>
</g>
<g >
<title>__kmalloc_node (334,536,436 samples, 3.20%)</title><rect x="565.8" y="133" width="37.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="568.81" y="143.5" >__k..</text>
</g>
<g >
<title>update_process_times (1,654,343 samples, 0.02%)</title><rect x="831.1" y="53" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="834.12" y="63.5" ></text>
</g>
<g >
<title>__check_object_size (43,240,481 samples, 0.41%)</title><rect x="251.7" y="165" width="4.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="254.69" y="175.5" ></text>
</g>
<g >
<title>kfree (17,482,911 samples, 0.17%)</title><rect x="510.8" y="149" width="2.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="513.78" y="159.5" ></text>
</g>
<g >
<title>syscall_exit_work (477,222,903 samples, 4.57%)</title><rect x="1040.4" y="165" width="54.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1043.44" y="175.5" >sysca..</text>
</g>
<g >
<title>__hrtimer_run_queues (1,645,119 samples, 0.02%)</title><rect x="428.5" y="85" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="431.48" y="95.5" ></text>
</g>
<g >
<title>__sys_bpf (2,214,421 samples, 0.02%)</title><rect x="1189.7" y="181" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.74" y="191.5" ></text>
</g>
<g >
<title>dput (17,358,225 samples, 0.17%)</title><rect x="1071.3" y="117" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1074.27" y="127.5" ></text>
</g>
<g >
<title>update_wall_time (2,546,811 samples, 0.02%)</title><rect x="90.2" y="85" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="93.18" y="95.5" ></text>
</g>
<g >
<title>__cond_resched (6,678,902 samples, 0.06%)</title><rect x="720.9" y="101" width="0.8" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="723.90" y="111.5" ></text>
</g>
<g >
<title>kfree (33,405,158 samples, 0.32%)</title><rect x="1073.2" y="117" width="3.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1076.23" y="127.5" ></text>
</g>
<g >
<title>path_put (27,493,529 samples, 0.26%)</title><rect x="1078.3" y="117" width="3.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1081.33" y="127.5" ></text>
</g>
<g >
<title>kvmalloc_node (11,786,041 samples, 0.11%)</title><rect x="796.7" y="165" width="1.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="799.71" y="175.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1,685,863 samples, 0.02%)</title><rect x="831.3" y="117" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="834.31" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (4,224,085 samples, 0.04%)</title><rect x="90.2" y="133" width="0.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="93.18" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,214,421 samples, 0.02%)</title><rect x="1189.7" y="213" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.74" y="223.5" ></text>
</g>
<g >
<title>__kmem_cache_free (238,842,453 samples, 2.29%)</title><rect x="533.1" y="117" width="27.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="536.12" y="127.5" >_..</text>
</g>
<g >
<title>rep_movs_alternative (97,742,798 samples, 0.94%)</title><rect x="614.9" y="149" width="11.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="617.87" y="159.5" ></text>
</g>
<g >
<title>get_timestamp (20,801,081 samples, 0.20%)</title><rect x="20.7" y="229" width="2.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="23.73" y="239.5" ></text>
</g>
<g >
<title>[unknown] (2,881,548 samples, 0.03%)</title><rect x="10.0" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>kvmalloc_node (611,992,070 samples, 5.86%)</title><rect x="710.4" y="133" width="69.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="713.40" y="143.5" >kvmallo..</text>
</g>
<g >
<title>kvfree (419,011,283 samples, 4.01%)</title><rect x="512.8" y="149" width="47.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="515.76" y="159.5" >kvfree</text>
</g>
<g >
<title>kmalloc_slab (50,301,398 samples, 0.48%)</title><rect x="760.8" y="101" width="5.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="763.83" y="111.5" ></text>
</g>
<g >
<title>security_bpf (25,111,668 samples, 0.24%)</title><rect x="625.9" y="149" width="2.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="628.92" y="159.5" ></text>
</g>
<g >
<title>check_stack_object (113,196,474 samples, 1.08%)</title><rect x="488.4" y="149" width="12.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="491.44" y="159.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,654,343 samples, 0.02%)</title><rect x="831.1" y="85" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="834.12" y="95.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (3,340,206 samples, 0.03%)</title><rect x="831.1" y="165" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="834.12" y="175.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (6,729,890 samples, 0.06%)</title><rect x="709.6" y="133" width="0.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="712.63" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (2,214,421 samples, 0.02%)</title><rect x="1189.7" y="197" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.74" y="207.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (4,221,184 samples, 0.04%)</title><rect x="698.4" y="117" width="0.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="701.37" y="127.5" ></text>
</g>
<g >
<title>__check_heap_object (26,869,410 samples, 0.26%)</title><rect x="637.9" y="133" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="640.91" y="143.5" ></text>
</g>
<g >
<title>__do_softirq (1,685,863 samples, 0.02%)</title><rect x="831.3" y="101" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="834.31" y="111.5" ></text>
</g>
<g >
<title>__virt_addr_valid (16,713,535 samples, 0.16%)</title><rect x="702.2" y="133" width="1.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="705.16" y="143.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (21,679,007 samples, 0.21%)</title><rect x="775.8" y="117" width="2.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="778.79" y="127.5" ></text>
</g>
<g >
<title>should_failslab (2,495,921 samples, 0.02%)</title><rect x="760.5" y="85" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="763.55" y="95.5" ></text>
</g>
<g >
<title>__check_heap_object (156,951,575 samples, 1.50%)</title><rect x="657.0" y="117" width="17.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="659.96" y="127.5" ></text>
</g>
<g >
<title>syscall_exit_work (11,788,416 samples, 0.11%)</title><rect x="1094.4" y="181" width="1.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1097.38" y="191.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5,054,605 samples, 0.05%)</title><rect x="90.2" y="165" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="93.18" y="175.5" ></text>
</g>
<g >
<title>syscall (9,865,939,022 samples, 94.50%)</title><rect x="73.9" y="229" width="1115.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="76.90" y="239.5" >syscall</text>
</g>
<g >
<title>update_process_times (1,677,274 samples, 0.02%)</title><rect x="90.5" y="101" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="93.46" y="111.5" ></text>
</g>
<g >
<title>task_work_run (2,558,411 samples, 0.02%)</title><rect x="1039.3" y="149" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1042.29" y="159.5" ></text>
</g>
<g >
<title>should_failslab (1,664,726 samples, 0.02%)</title><rect x="603.4" y="117" width="0.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="606.43" y="127.5" ></text>
</g>
<g >
<title>__sys_bpf (35,418,349 samples, 0.34%)</title><rect x="247.5" y="181" width="4.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="250.50" y="191.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (14,329,777 samples, 0.14%)</title><rect x="603.6" y="133" width="1.6" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="606.62" y="143.5" ></text>
</g>
<g >
<title>task_mm_cid_work (1,703,637 samples, 0.02%)</title><rect x="1039.4" y="133" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1042.39" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,214,421 samples, 0.02%)</title><rect x="1189.7" y="229" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.74" y="239.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (20,873,218 samples, 0.20%)</title><rect x="589.5" y="101" width="2.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="592.46" y="111.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (54,298,859 samples, 0.52%)</title><rect x="504.6" y="149" width="6.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="507.65" y="159.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (13,290,228 samples, 0.13%)</title><rect x="789.9" y="165" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="792.92" y="175.5" ></text>
</g>
<g >
<title>vmemdup_user (1,347,546,431 samples, 12.91%)</title><rect x="628.8" y="149" width="152.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="631.76" y="159.5" >vmemdup_user</text>
</g>
<g >
<title>__check_heap_object (27,421,247 samples, 0.26%)</title><rect x="325.7" y="149" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="328.72" y="159.5" ></text>
</g>
<g >
<title>should_failslab (5,015,593 samples, 0.05%)</title><rect x="591.8" y="101" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="594.82" y="111.5" ></text>
</g>
<g >
<title>scheduler_tick (1,654,343 samples, 0.02%)</title><rect x="831.1" y="37" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="834.12" y="47.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (22,580,361 samples, 0.22%)</title><rect x="823.5" y="181" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="826.47" y="191.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (190,084,965 samples, 1.82%)</title><rect x="826.0" y="181" width="21.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="829.02" y="191.5" >s..</text>
</g>
<g >
<title>memcmp (54,210,892 samples, 0.52%)</title><rect x="475.0" y="117" width="6.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="478.04" y="127.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (2,546,811 samples, 0.02%)</title><rect x="90.2" y="117" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="93.18" y="127.5" ></text>
</g>
<g >
<title>__fget_light (171,299,140 samples, 1.64%)</title><rect x="391.7" y="133" width="19.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="394.68" y="143.5" ></text>
</g>
<g >
<title>_copy_to_user (21,694,356 samples, 0.21%)</title><rect x="783.4" y="165" width="2.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="786.41" y="175.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (168,571,799 samples, 1.61%)</title><rect x="573.3" y="117" width="19.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="576.34" y="127.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (19,817,398 samples, 0.19%)</title><rect x="597.9" y="117" width="2.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="600.89" y="127.5" ></text>
</g>
<g >
<title>migrate_enable (42,639,873 samples, 0.41%)</title><rect x="483.6" y="133" width="4.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="486.62" y="143.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (2,546,811 samples, 0.02%)</title><rect x="90.2" y="101" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="93.18" y="111.5" ></text>
</g>
<g >
<title>kmalloc_slab (48,655,012 samples, 0.47%)</title><rect x="592.4" y="117" width="5.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="595.39" y="127.5" ></text>
</g>
<g >
<title>__fdget (171,299,140 samples, 1.64%)</title><rect x="391.7" y="149" width="19.3" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="394.68" y="159.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (3,303,329 samples, 0.03%)</title><rect x="420.5" y="149" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="423.48" y="159.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (240,865,707 samples, 2.31%)</title><rect x="42.0" y="213" width="27.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="44.95" y="223.5" >c..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,184,206,821 samples, 20.92%)</title><rect x="847.5" y="181" width="246.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="850.50" y="191.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>__virt_addr_valid (209,406,386 samples, 2.01%)</title><rect x="674.7" y="117" width="23.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="677.70" y="127.5" >_..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (19,945,755 samples, 0.19%)</title><rect x="1099.8" y="197" width="2.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1102.79" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,918,151,078 samples, 85.42%)</title><rect x="94.1" y="213" width="1007.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="97.05" y="223.5" >entry_SYSCALL_64</text>
</g>
</g>
</svg>
