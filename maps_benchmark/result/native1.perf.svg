<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>__vmalloc_node_range (830,805 samples, 0.03%)</title><rect x="1189.6" y="117" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1192.64" y="127.5" ></text>
</g>
<g >
<title>syscall (2,837,424,860 samples, 97.83%)</title><rect x="34.2" y="245" width="1154.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="37.23" y="255.5" >syscall</text>
</g>
<g >
<title>_copy_from_user (10,119,198 samples, 0.35%)</title><rect x="406.8" y="165" width="4.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="409.83" y="175.5" ></text>
</g>
<g >
<title>_copy_from_user (7,295,426 samples, 0.25%)</title><rect x="709.1" y="149" width="3.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="712.09" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,565,626,581 samples, 88.46%)</title><rect x="55.7" y="229" width="1043.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="58.72" y="239.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>bpf_prog_load (838,132 samples, 0.03%)</title><rect x="1189.0" y="181" width="0.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1191.95" y="191.5" ></text>
</g>
<g >
<title>__rcu_read_lock (845,101 samples, 0.03%)</title><rect x="401.6" y="165" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="404.58" y="175.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (7,063,066 samples, 0.24%)</title><rect x="587.7" y="117" width="2.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="590.65" y="127.5" ></text>
</g>
<g >
<title>main (24,871,245 samples, 0.86%)</title><rect x="24.1" y="245" width="10.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.11" y="255.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (7,232,207 samples, 0.25%)</title><rect x="756.9" y="101" width="2.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="759.86" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (1,429,198,259 samples, 49.28%)</title><rect x="245.7" y="197" width="581.5" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="248.74" y="207.5" >__x64_sys_bpf</text>
</g>
<g >
<title>clear_page_erms (830,805 samples, 0.03%)</title><rect x="1189.6" y="53" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1192.64" y="63.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (6,446,714 samples, 0.22%)</title><rect x="513.1" y="149" width="2.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="516.14" y="159.5" ></text>
</g>
<g >
<title>do_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="117" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="36.88" y="127.5" ></text>
</g>
<g >
<title>[unknown] (779,837 samples, 0.03%)</title><rect x="10.0" y="245" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,699,209 samples, 0.06%)</title><rect x="53.1" y="69" width="0.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="56.09" y="79.5" ></text>
</g>
<g >
<title>hrtimer_update_next_event (827,497 samples, 0.03%)</title><rect x="549.0" y="53" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="552.04" y="63.5" ></text>
</g>
<g >
<title>kvmalloc_node (1,692,429 samples, 0.06%)</title><rect x="805.4" y="181" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="808.37" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (827,497 samples, 0.03%)</title><rect x="549.0" y="117" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="552.04" y="127.5" ></text>
</g>
<g >
<title>_dl_load_cache_lookup (779,837 samples, 0.03%)</title><rect x="10.0" y="213" width="0.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>__fget_light (30,152,439 samples, 1.04%)</title><rect x="382.4" y="149" width="12.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="385.38" y="159.5" ></text>
</g>
<g >
<title>bpf_map_area_alloc (830,805 samples, 0.03%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1192.64" y="159.5" ></text>
</g>
<g >
<title>security_bpf (12,247,904 samples, 0.42%)</title><rect x="623.4" y="165" width="5.0" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="626.40" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (2,508,501 samples, 0.09%)</title><rect x="1189.0" y="213" width="1.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1191.95" y="223.5" ></text>
</g>
<g >
<title>syscall_exit_work (1,419,367 samples, 0.05%)</title><rect x="1090.9" y="197" width="0.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1093.89" y="207.5" ></text>
</g>
<g >
<title>bpf_map_lookup_elem (33,144,615 samples, 1.14%)</title><rect x="10.6" y="245" width="13.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.62" y="255.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (5,889,205 samples, 0.20%)</title><rect x="493.9" y="165" width="2.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="496.92" y="175.5" ></text>
</g>
<g >
<title>check_stack_object (34,016,194 samples, 1.17%)</title><rect x="480.1" y="165" width="13.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="483.08" y="175.5" ></text>
</g>
<g >
<title>__kmem_cache_free (18,939,545 samples, 0.65%)</title><rect x="505.4" y="149" width="7.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="508.43" y="159.5" ></text>
</g>
<g >
<title>vmemdup_user (7,331,580 samples, 0.25%)</title><rect x="824.2" y="181" width="3.0" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="827.22" y="191.5" ></text>
</g>
<g >
<title>migrate_disable (4,507,476 samples, 0.16%)</title><rect x="609.3" y="165" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="612.32" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (747,915 samples, 0.03%)</title><rect x="10.3" y="245" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.32" y="255.5" ></text>
</g>
<g >
<title>__kmalloc_node (4,187,446 samples, 0.14%)</title><rect x="703.6" y="149" width="1.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="706.64" y="159.5" ></text>
</g>
<g >
<title>all (2,900,368,787 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>__cond_resched (4,477,336 samples, 0.15%)</title><rect x="564.5" y="133" width="1.9" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="567.54" y="143.5" ></text>
</g>
<g >
<title>__GI___getrandom (836,046 samples, 0.03%)</title><rect x="33.9" y="213" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="36.88" y="223.5" ></text>
</g>
<g >
<title>elf_map (560,383 samples, 0.02%)</title><rect x="10.3" y="149" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="13.32" y="159.5" ></text>
</g>
<g >
<title>audit_reset_context (76,773,507 samples, 2.65%)</title><rect x="1050.0" y="149" width="31.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1052.96" y="159.5" >au..</text>
</g>
<g >
<title>bpf_map_copy_value (165,428,725 samples, 5.70%)</title><rect x="412.8" y="165" width="67.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="415.78" y="175.5" >bpf_map..</text>
</g>
<g >
<title>__virt_addr_valid (5,351,613 samples, 0.18%)</title><rect x="403.9" y="165" width="2.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="406.86" y="175.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (4,747,976 samples, 0.16%)</title><rect x="401.9" y="165" width="2.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="404.93" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_work (122,413,623 samples, 4.22%)</title><rect x="1041.1" y="181" width="49.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1044.09" y="191.5" >sysca..</text>
</g>
<g >
<title>__hrtimer_next_event_base (827,497 samples, 0.03%)</title><rect x="549.0" y="37" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="552.04" y="47.5" ></text>
</g>
<g >
<title>__virt_addr_valid (77,251,461 samples, 2.66%)</title><rect x="672.2" y="133" width="31.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="675.21" y="143.5" >__..</text>
</g>
<g >
<title>mntput (2,781,880 samples, 0.10%)</title><rect x="1071.4" y="133" width="1.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1074.39" y="143.5" ></text>
</g>
<g >
<title>kmalloc_slab (10,174,626 samples, 0.35%)</title><rect x="590.5" y="133" width="4.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="593.53" y="143.5" ></text>
</g>
<g >
<title>amd_clear_divider (11,866,691 samples, 0.41%)</title><rect x="827.2" y="197" width="4.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="830.21" y="207.5" ></text>
</g>
<g >
<title>security_bpf (5,655,101 samples, 0.19%)</title><rect x="821.9" y="181" width="2.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="824.92" y="191.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (560,383 samples, 0.02%)</title><rect x="10.3" y="117" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="13.32" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,776,785 samples, 0.16%)</title><rect x="53.8" y="229" width="1.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="56.78" y="239.5" ></text>
</g>
<g >
<title>do_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="117" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (107,823,759 samples, 3.72%)</title><rect x="1045.6" y="165" width="43.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1048.64" y="175.5" >__au..</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (9,853,708 samples, 0.34%)</title><rect x="1099.5" y="229" width="4.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1102.54" y="239.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (38,478,504 samples, 1.33%)</title><rect x="840.5" y="181" width="15.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="843.48" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,508,501 samples, 0.09%)</title><rect x="1189.0" y="229" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.95" y="239.5" ></text>
</g>
<g >
<title>_copy_to_user (15,291,792 samples, 0.53%)</title><rect x="785.6" y="181" width="6.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="788.64" y="191.5" ></text>
</g>
<g >
<title>__kmalloc_node (7,253,882 samples, 0.25%)</title><rect x="398.6" y="165" width="3.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="401.63" y="175.5" ></text>
</g>
<g >
<title>kvmalloc_node (161,733,893 samples, 5.58%)</title><rect x="715.7" y="149" width="65.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="718.74" y="159.5" >kvmallo..</text>
</g>
<g >
<title>__kmem_cache_alloc_node (59,386,620 samples, 2.05%)</title><rect x="566.4" y="133" width="24.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="569.37" y="143.5" >_..</text>
</g>
<g >
<title>__check_heap_object (46,878,089 samples, 1.62%)</title><rect x="653.1" y="133" width="19.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="656.14" y="143.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (839,564 samples, 0.03%)</title><rect x="1189.3" y="149" width="0.3" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1192.29" y="159.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,699,209 samples, 0.06%)</title><rect x="53.1" y="229" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="56.09" y="239.5" ></text>
</g>
<g >
<title>unroll_tree_refs (15,716,981 samples, 0.54%)</title><rect x="1074.8" y="133" width="6.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1077.80" y="143.5" ></text>
</g>
<g >
<title>get_page_from_freelist (830,805 samples, 0.03%)</title><rect x="1189.6" y="69" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1192.64" y="79.5" ></text>
</g>
<g >
<title>error_entry (842,843 samples, 0.03%)</title><rect x="1103.5" y="229" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1106.54" y="239.5" ></text>
</g>
<g >
<title>do_user_addr_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="165" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>__fdget (10,006,567 samples, 0.35%)</title><rect x="254.1" y="181" width="4.0" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="257.05" y="191.5" ></text>
</g>
<g >
<title>[unknown] (1,527,752 samples, 0.05%)</title><rect x="10.0" y="261" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>do_mmap (560,383 samples, 0.02%)</title><rect x="10.3" y="101" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.32" y="111.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (10,313,193 samples, 0.36%)</title><rect x="1095.3" y="213" width="4.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1098.34" y="223.5" ></text>
</g>
<g >
<title>should_failslab (850,661 samples, 0.03%)</title><rect x="777.4" y="117" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="780.43" y="127.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,699,209 samples, 0.06%)</title><rect x="53.1" y="181" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="56.09" y="191.5" ></text>
</g>
<g >
<title>__check_heap_object (6,099,867 samples, 0.21%)</title><rect x="636.5" y="149" width="2.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="639.49" y="159.5" ></text>
</g>
<g >
<title>__kmalloc_node (144,485,366 samples, 4.98%)</title><rect x="719.0" y="133" width="58.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="722.00" y="143.5" >__kmal..</text>
</g>
<g >
<title>kvfree (115,499,712 samples, 3.98%)</title><rect x="502.4" y="165" width="47.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="505.39" y="175.5" >kvfree</text>
</g>
<g >
<title>vma_interval_tree_insert (560,383 samples, 0.02%)</title><rect x="10.3" y="69" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.32" y="79.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (2,554,729 samples, 0.09%)</title><rect x="602.4" y="149" width="1.0" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="605.39" y="159.5" ></text>
</g>
<g >
<title>kmalloc_slab (4,454,137 samples, 0.15%)</title><rect x="779.7" y="133" width="1.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="782.73" y="143.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (3,327,881 samples, 0.11%)</title><rect x="832.0" y="197" width="1.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="835.03" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,113,847,860 samples, 72.88%)</title><rect x="234.1" y="213" width="860.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="237.07" y="223.5" >do_syscall_64</text>
</g>
<g >
<title>bpf_map_value_size (12,074,273 samples, 0.42%)</title><rect x="798.4" y="181" width="4.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="801.39" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="181" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="36.88" y="191.5" ></text>
</g>
<g >
<title>__virt_addr_valid (9,217,405 samples, 0.32%)</title><rect x="705.3" y="149" width="3.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="708.34" y="159.5" ></text>
</g>
<g >
<title>__virt_addr_valid (20,409,838 samples, 0.70%)</title><rect x="365.7" y="149" width="8.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="368.72" y="159.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,699,209 samples, 0.06%)</title><rect x="53.1" y="213" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="56.09" y="223.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (827,497 samples, 0.03%)</title><rect x="549.0" y="85" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="552.04" y="95.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (66,617,602 samples, 2.30%)</title><rect x="732.7" y="117" width="27.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="735.70" y="127.5" >_..</text>
</g>
<g >
<title>kmalloc_slab (6,735,574 samples, 0.23%)</title><rect x="603.4" y="149" width="2.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="606.43" y="159.5" ></text>
</g>
<g >
<title>memset_orig (10,326,450 samples, 0.36%)</title><rect x="597.5" y="133" width="4.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="600.50" y="143.5" ></text>
</g>
<g >
<title>__sys_bpf (2,508,501 samples, 0.09%)</title><rect x="1189.0" y="197" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.95" y="207.5" ></text>
</g>
<g >
<title>bprm_execve (747,915 samples, 0.03%)</title><rect x="10.3" y="181" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.32" y="191.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (3,096,284 samples, 0.11%)</title><rect x="1094.1" y="213" width="1.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1097.08" y="223.5" ></text>
</g>
<g >
<title>__check_heap_object (9,268,340 samples, 0.32%)</title><rect x="327.1" y="165" width="3.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="330.13" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="149" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="36.88" y="159.5" ></text>
</g>
<g >
<title>vm_mmap (560,383 samples, 0.02%)</title><rect x="10.3" y="133" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="13.32" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="133" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="36.88" y="143.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (2,253,983 samples, 0.08%)</title><rect x="767.5" y="117" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="770.45" y="127.5" ></text>
</g>
<g >
<title>filemap_map_pages (836,046 samples, 0.03%)</title><rect x="33.9" y="101" width="0.3" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="36.88" y="111.5" ></text>
</g>
<g >
<title>kmalloc_trace (839,564 samples, 0.03%)</title><rect x="1189.3" y="165" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1192.29" y="175.5" ></text>
</g>
<g >
<title>__check_object_size (126,530,199 samples, 4.36%)</title><rect x="330.9" y="165" width="51.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="333.90" y="175.5" >__che..</text>
</g>
<g >
<title>alloc_pages (830,805 samples, 0.03%)</title><rect x="1189.6" y="101" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1192.64" y="111.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (11,286,187 samples, 0.39%)</title><rect x="496.3" y="165" width="4.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="499.32" y="175.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (6,958,272 samples, 0.24%)</title><rect x="594.7" y="133" width="2.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="597.67" y="143.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (8,410,860 samples, 0.29%)</title><rect x="1034.2" y="165" width="3.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1037.24" y="175.5" ></text>
</g>
<g >
<title>__libc_start_call_main (2,895,440,720 samples, 99.83%)</title><rect x="10.6" y="261" width="1178.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.62" y="271.5" >__libc_start_call_main</text>
</g>
<g >
<title>kvfree (5,058,116 samples, 0.17%)</title><rect x="803.3" y="181" width="2.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="806.31" y="191.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (1,954,552 samples, 0.07%)</title><rect x="475.8" y="149" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="478.84" y="159.5" ></text>
</g>
<g >
<title>should_failslab (1,690,282 samples, 0.06%)</title><rect x="601.7" y="133" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="604.70" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,508,501 samples, 0.09%)</title><rect x="1189.0" y="245" width="1.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1191.95" y="255.5" ></text>
</g>
<g >
<title>handle_mm_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="149" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>bpf_jit_blind_constants (838,132 samples, 0.03%)</title><rect x="1189.0" y="149" width="0.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1191.95" y="159.5" ></text>
</g>
<g >
<title>_dl_check_all_versions (826,925 samples, 0.03%)</title><rect x="1188.6" y="261" width="0.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1191.62" y="271.5" ></text>
</g>
<g >
<title>load_elf_binary (747,915 samples, 0.03%)</title><rect x="10.3" y="165" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.32" y="175.5" ></text>
</g>
<g >
<title>_copy_from_user (5,582,040 samples, 0.19%)</title><rect x="783.4" y="181" width="2.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="786.37" y="191.5" ></text>
</g>
<g >
<title>migrate_enable (8,473,997 samples, 0.29%)</title><rect x="476.6" y="149" width="3.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="479.64" y="159.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="197" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="36.88" y="207.5" ></text>
</g>
<g >
<title>__alloc_pages (830,805 samples, 0.03%)</title><rect x="1189.6" y="85" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1192.64" y="95.5" ></text>
</g>
<g >
<title>htab_map_alloc (830,805 samples, 0.03%)</title><rect x="1189.6" y="165" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.64" y="175.5" ></text>
</g>
<g >
<title>do_user_addr_fault (836,046 samples, 0.03%)</title><rect x="33.9" y="165" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="36.88" y="175.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (55,901,167 samples, 1.93%)</title><rect x="833.4" y="197" width="22.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="836.39" y="207.5" >s..</text>
</g>
<g >
<title>kvmalloc_node (139,584,602 samples, 4.81%)</title><rect x="549.4" y="165" width="56.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="552.38" y="175.5" >kvmall..</text>
</g>
<g >
<title>__handle_mm_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="133" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>check_stack_object (7,063,413 samples, 0.24%)</title><rect x="712.1" y="149" width="2.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="715.06" y="159.5" ></text>
</g>
<g >
<title>do_syscall_64 (747,915 samples, 0.03%)</title><rect x="10.3" y="229" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.32" y="239.5" ></text>
</g>
<g >
<title>__check_heap_object (23,005,470 samples, 0.79%)</title><rect x="356.4" y="149" width="9.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="359.36" y="159.5" ></text>
</g>
<g >
<title>__sys_bpf (1,291,033,832 samples, 44.51%)</title><rect x="258.1" y="181" width="525.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="261.12" y="191.5" >__sys_bpf</text>
</g>
<g >
<title>rep_movs_alternative (25,601,195 samples, 0.88%)</title><rect x="613.0" y="165" width="10.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="615.98" y="175.5" ></text>
</g>
<g >
<title>migrate_enable (4,476,743 samples, 0.15%)</title><rect x="611.2" y="165" width="1.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="614.16" y="175.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (4,784,041 samples, 0.16%)</title><rect x="777.8" y="133" width="1.9" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="780.78" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (747,915 samples, 0.03%)</title><rect x="10.3" y="197" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.32" y="207.5" ></text>
</g>
<g >
<title>memcmp (25,049,039 samples, 0.86%)</title><rect x="465.6" y="133" width="10.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="468.65" y="143.5" ></text>
</g>
<g >
<title>__fget_light (9,787,085 samples, 0.34%)</title><rect x="394.6" y="165" width="4.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="397.65" y="175.5" ></text>
</g>
<g >
<title>path_put (4,433,068 samples, 0.15%)</title><rect x="1085.4" y="149" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1088.41" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (20,428,017 samples, 0.70%)</title><rect x="223.8" y="213" width="8.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="226.82" y="223.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (3,626,324 samples, 0.13%)</title><rect x="796.9" y="181" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="799.92" y="191.5" ></text>
</g>
<g >
<title>__kmalloc_node (111,586,247 samples, 3.85%)</title><rect x="557.0" y="149" width="45.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="559.99" y="159.5" >__km..</text>
</g>
<g >
<title>__x64_sys_execve (747,915 samples, 0.03%)</title><rect x="10.3" y="213" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.32" y="223.5" ></text>
</g>
<g >
<title>mmap_region (560,383 samples, 0.02%)</title><rect x="10.3" y="85" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.32" y="95.5" ></text>
</g>
<g >
<title>__sys_bpf (9,253,461 samples, 0.32%)</title><rect x="242.0" y="197" width="3.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="244.98" y="207.5" ></text>
</g>
<g >
<title>kfree (82,632,248 samples, 2.85%)</title><rect x="515.8" y="149" width="33.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="518.76" y="159.5" >kf..</text>
</g>
<g >
<title>__audit_syscall_entry (9,824,922 samples, 0.34%)</title><rect x="852.1" y="165" width="4.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="855.13" y="175.5" ></text>
</g>
<g >
<title>timekeeping_advance (1,699,209 samples, 0.06%)</title><rect x="53.1" y="85" width="0.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="56.09" y="95.5" ></text>
</g>
<g >
<title>kfree (3,627,417 samples, 0.13%)</title><rect x="500.9" y="165" width="1.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="503.91" y="175.5" ></text>
</g>
<g >
<title>update_wall_time (1,699,209 samples, 0.06%)</title><rect x="53.1" y="101" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="56.09" y="111.5" ></text>
</g>
<g >
<title>audit_reset_context (3,412,029 samples, 0.12%)</title><rect x="1089.5" y="165" width="1.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1092.51" y="175.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,699,209 samples, 0.06%)</title><rect x="53.1" y="197" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="56.09" y="207.5" ></text>
</g>
<g >
<title>__fdget (30,152,439 samples, 1.04%)</title><rect x="382.4" y="165" width="12.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="385.38" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (577,035,719 samples, 19.90%)</title><rect x="856.1" y="197" width="234.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="859.13" y="207.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>rep_movs_alternative (4,508,316 samples, 0.16%)</title><rect x="781.5" y="149" width="1.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="784.54" y="159.5" ></text>
</g>
<g >
<title>___slab_alloc (839,564 samples, 0.03%)</title><rect x="1189.3" y="133" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1192.29" y="143.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (208,258,512 samples, 7.18%)</title><rect x="1103.9" y="229" width="84.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1106.89" y="239.5" >syscall_r..</text>
</g>
<g >
<title>memcpy (1,960,191 samples, 0.07%)</title><rect x="606.2" y="165" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="609.17" y="175.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (18,476,203 samples, 0.64%)</title><rect x="458.1" y="133" width="7.5" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="461.13" y="143.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,699,209 samples, 0.06%)</title><rect x="53.1" y="165" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="56.09" y="175.5" ></text>
</g>
<g >
<title>filemap_map_pages (779,837 samples, 0.03%)</title><rect x="10.0" y="101" width="0.3" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>dput (4,472,068 samples, 0.15%)</title><rect x="1066.7" y="133" width="1.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1069.73" y="143.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (1,699,209 samples, 0.06%)</title><rect x="53.1" y="117" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="56.09" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,699,209 samples, 0.06%)</title><rect x="53.1" y="149" width="0.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="56.09" y="159.5" ></text>
</g>
<g >
<title>__kmem_cache_free (60,584,275 samples, 2.09%)</title><rect x="524.7" y="133" width="24.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="527.73" y="143.5" >_..</text>
</g>
<g >
<title>next_uptodate_folio (779,837 samples, 0.03%)</title><rect x="10.0" y="85" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (827,497 samples, 0.03%)</title><rect x="549.0" y="101" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="552.04" y="111.5" ></text>
</g>
<g >
<title>kfree (6,991,937 samples, 0.24%)</title><rect x="1068.5" y="133" width="2.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1071.55" y="143.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (5,641,074 samples, 0.19%)</title><rect x="838.2" y="181" width="2.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="841.18" y="191.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (1,945,840 samples, 0.07%)</title><rect x="406.0" y="165" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="409.04" y="175.5" ></text>
</g>
<g >
<title>__check_object_size (20,136,031 samples, 0.69%)</title><rect x="245.9" y="181" width="8.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="248.86" y="191.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (3,335,546 samples, 0.12%)</title><rect x="1031.4" y="181" width="1.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1034.40" y="191.5" ></text>
</g>
<g >
<title>__bpf_map_area_alloc (830,805 samples, 0.03%)</title><rect x="1189.6" y="133" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1192.64" y="143.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (1,973,586 samples, 0.07%)</title><rect x="714.9" y="149" width="0.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="717.93" y="159.5" ></text>
</g>
<g >
<title>bpf_prog_select_runtime (838,132 samples, 0.03%)</title><rect x="1189.0" y="165" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1191.95" y="175.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (65,337,009 samples, 2.25%)</title><rect x="449.3" y="149" width="26.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="452.26" y="159.5" >h..</text>
</g>
<g >
<title>map_benchmark (2,900,303,898 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >map_benchmark</text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (12,424,470 samples, 0.43%)</title><rect x="791.9" y="181" width="5.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="794.86" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="181" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>check_stack_object (20,545,250 samples, 0.71%)</title><rect x="374.0" y="149" width="8.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="377.02" y="159.5" ></text>
</g>
<g >
<title>memchr_inv (39,002,887 samples, 1.34%)</title><rect x="806.1" y="181" width="15.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="809.05" y="191.5" ></text>
</g>
<g >
<title>vmemdup_user (380,965,200 samples, 13.14%)</title><rect x="628.4" y="165" width="155.0" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="631.38" y="175.5" >vmemdup_user</text>
</g>
<g >
<title>fpregs_assert_state_consistent (8,417,098 samples, 0.29%)</title><rect x="1037.7" y="181" width="3.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1040.67" y="191.5" ></text>
</g>
<g >
<title>__check_object_size (158,955,740 samples, 5.48%)</title><rect x="639.0" y="149" width="64.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="641.97" y="159.5" >__check..</text>
</g>
<g >
<title>__x86_indirect_thunk_array (4,767,046 samples, 0.16%)</title><rect x="232.1" y="213" width="2.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="235.13" y="223.5" ></text>
</g>
<g >
<title>next_uptodate_folio (836,046 samples, 0.03%)</title><rect x="33.9" y="85" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="36.88" y="95.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (12,060,245 samples, 0.42%)</title><rect x="1032.8" y="181" width="4.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1035.76" y="191.5" ></text>
</g>
<g >
<title>map_create (830,805 samples, 0.03%)</title><rect x="1189.6" y="181" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.64" y="191.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (1,699,209 samples, 0.06%)</title><rect x="53.1" y="133" width="0.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="56.09" y="143.5" ></text>
</g>
<g >
<title>_copy_to_user (4,510,634 samples, 0.16%)</title><rect x="410.9" y="165" width="1.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="413.94" y="175.5" ></text>
</g>
<g >
<title>__cond_resched (3,629,734 samples, 0.13%)</title><rect x="731.2" y="117" width="1.5" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="734.22" y="127.5" ></text>
</g>
<g >
<title>unroll_tree_refs (5,637,486 samples, 0.19%)</title><rect x="1087.2" y="149" width="2.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1090.21" y="159.5" ></text>
</g>
<g >
<title>syscall (2,508,501 samples, 0.09%)</title><rect x="1189.0" y="261" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1191.95" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (779,837 samples, 0.03%)</title><rect x="10.0" y="197" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>kfree (10,354,116 samples, 0.36%)</title><rect x="1081.2" y="149" width="4.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1084.20" y="159.5" ></text>
</g>
<g >
<title>path_put (5,594,442 samples, 0.19%)</title><rect x="1072.5" y="133" width="2.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1075.53" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (827,497 samples, 0.03%)</title><rect x="549.0" y="69" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="552.04" y="79.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (6,411,446 samples, 0.22%)</title><rect x="1091.5" y="197" width="2.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1094.47" y="207.5" ></text>
</g>
<g >
<title>htab_map_hash (43,009,880 samples, 1.48%)</title><rect x="431.8" y="149" width="17.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="434.76" y="159.5" ></text>
</g>
<g >
<title>btf_new_fd (839,564 samples, 0.03%)</title><rect x="1189.3" y="181" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.29" y="191.5" ></text>
</g>
<g >
<title>kmalloc_slab (18,810,480 samples, 0.65%)</title><rect x="759.8" y="117" width="7.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="762.80" y="127.5" ></text>
</g>
<g >
<title>map_benchmark_bpf__open (836,046 samples, 0.03%)</title><rect x="33.9" y="229" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="36.88" y="239.5" ></text>
</g>
<g >
<title>memcpy_orig (5,804,589 samples, 0.20%)</title><rect x="607.0" y="165" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="609.96" y="175.5" ></text>
</g>
<g >
<title>_dl_map_object (779,837 samples, 0.03%)</title><rect x="10.0" y="229" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>memset_orig (22,276,562 samples, 0.77%)</title><rect x="768.4" y="117" width="9.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="771.37" y="127.5" ></text>
</g>
</g>
</svg>
