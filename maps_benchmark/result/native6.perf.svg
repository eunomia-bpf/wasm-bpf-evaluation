<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>syscall_trace_enter.constprop.0 (118,413,533 samples, 1.13%)</title><rect x="837.1" y="261" width="13.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="840.07" y="271.5" ></text>
</g>
<g >
<title>timekeeping_advance (1,666,146 samples, 0.02%)</title><rect x="756.9" y="37" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="759.93" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,280,481 samples, 0.02%)</title><rect x="1189.7" y="309" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.74" y="319.5" ></text>
</g>
<g >
<title>_copy_from_user (33,165,869 samples, 0.32%)</title><rect x="704.9" y="229" width="3.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="707.91" y="239.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (5,715,123 samples, 0.05%)</title><rect x="602.9" y="213" width="0.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="605.91" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,666,146 samples, 0.02%)</title><rect x="756.9" y="133" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="759.93" y="143.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (34,203,814 samples, 0.33%)</title><rect x="498.8" y="245" width="3.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="501.81" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,685,774 samples, 0.02%)</title><rect x="421.6" y="245" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="424.56" y="255.5" ></text>
</g>
<g >
<title>kfree (355,876,579 samples, 3.40%)</title><rect x="520.3" y="229" width="40.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="523.27" y="239.5" >kfree</text>
</g>
<g >
<title>__virt_addr_valid (19,163,909 samples, 0.18%)</title><rect x="702.7" y="229" width="2.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="705.74" y="239.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (26,767,286 samples, 0.26%)</title><rect x="1092.9" y="293" width="3.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1095.85" y="303.5" ></text>
</g>
<g >
<title>migrate_enable (34,986,560 samples, 0.33%)</title><rect x="482.1" y="229" width="4.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="485.13" y="239.5" ></text>
</g>
<g >
<title>kvfree (466,735,988 samples, 4.46%)</title><rect x="507.8" y="245" width="52.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="510.76" y="255.5" >kvfree</text>
</g>
<g >
<title>rep_movs_alternative (14,254,502 samples, 0.14%)</title><rect x="779.1" y="229" width="1.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="782.15" y="239.5" ></text>
</g>
<g >
<title>kmalloc_slab (38,269,152 samples, 0.37%)</title><rect x="762.7" y="197" width="4.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="765.66" y="207.5" ></text>
</g>
<g >
<title>__rcu_read_lock (12,625,412 samples, 0.12%)</title><rect x="407.5" y="245" width="1.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="410.54" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (2,280,481 samples, 0.02%)</title><rect x="1189.7" y="293" width="0.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.74" y="303.5" ></text>
</g>
<g >
<title>syscall@plt (4,969,914 samples, 0.05%)</title><rect x="1189.0" y="325" width="0.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1191.98" y="335.5" ></text>
</g>
<g >
<title>memcpy_orig (16,723,099 samples, 0.16%)</title><rect x="610.5" y="245" width="1.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="613.46" y="255.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (49,038,825 samples, 0.47%)</title><rect x="1027.2" y="261" width="5.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1030.17" y="271.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (52,908,475 samples, 0.51%)</title><rect x="35.5" y="309" width="6.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="38.53" y="319.5" ></text>
</g>
<g >
<title>map_benchmark (10,459,278,826 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >map_benchmark</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (27,558,711 samples, 0.26%)</title><rect x="1100.2" y="309" width="3.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1103.16" y="319.5" ></text>
</g>
<g >
<title>path_put (41,899,790 samples, 0.40%)</title><rect x="1069.8" y="213" width="4.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1072.83" y="223.5" ></text>
</g>
<g >
<title>check_stack_object (62,172,439 samples, 0.59%)</title><rect x="380.6" y="229" width="7.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="383.55" y="239.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (2,528,474 samples, 0.02%)</title><rect x="413.1" y="245" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="416.10" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,124,642,358 samples, 20.31%)</title><rect x="850.4" y="277" width="239.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="853.43" y="287.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>tick_sched_timer (1,685,774 samples, 0.02%)</title><rect x="421.6" y="165" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="424.56" y="175.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (18,352,571 samples, 0.18%)</title><rect x="409.0" y="245" width="2.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="411.96" y="255.5" ></text>
</g>
<g >
<title>__virt_addr_valid (18,329,090 samples, 0.18%)</title><rect x="411.0" y="245" width="2.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="414.03" y="255.5" ></text>
</g>
<g >
<title>__cond_resched (5,000,632 samples, 0.05%)</title><rect x="721.6" y="197" width="0.5" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="724.58" y="207.5" ></text>
</g>
<g >
<title>__check_object_size (498,890,345 samples, 4.77%)</title><rect x="644.7" y="229" width="56.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="647.67" y="239.5" >__che..</text>
</g>
<g >
<title>__check_heap_object (36,766,070 samples, 0.35%)</title><rect x="640.5" y="229" width="4.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="643.52" y="239.5" ></text>
</g>
<g >
<title>get_timestamp (15,811,884 samples, 0.15%)</title><rect x="67.9" y="309" width="1.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="70.91" y="319.5" ></text>
</g>
<g >
<title>unroll_tree_refs (30,694,988 samples, 0.29%)</title><rect x="1074.6" y="213" width="3.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1077.56" y="223.5" ></text>
</g>
<g >
<title>amd_clear_divider (48,248,277 samples, 0.46%)</title><rect x="821.5" y="277" width="5.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="824.54" y="287.5" ></text>
</g>
<g >
<title>__fdget (137,749,165 samples, 1.32%)</title><rect x="387.7" y="245" width="15.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="390.66" y="255.5" ></text>
</g>
<g >
<title>htab_map_hash (148,844,094 samples, 1.42%)</title><rect x="441.8" y="229" width="16.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="444.80" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (22,576,635 samples, 0.22%)</title><rect x="85.6" y="309" width="2.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="88.63" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1,701,849 samples, 0.02%)</title><rect x="836.9" y="101" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="839.87" y="111.5" ></text>
</g>
<g >
<title>kvmalloc_node (599,821,916 samples, 5.73%)</title><rect x="711.5" y="229" width="67.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="714.48" y="239.5" >kvmallo..</text>
</g>
<g >
<title>kmalloc_slab (14,242,780 samples, 0.14%)</title><rect x="608.3" y="229" width="1.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="611.29" y="239.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (8,361,446 samples, 0.08%)</title><rect x="1026.2" y="261" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1029.23" y="271.5" ></text>
</g>
<g >
<title>__kmem_cache_free (268,667,715 samples, 2.57%)</title><rect x="530.1" y="213" width="30.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="533.11" y="223.5" >__..</text>
</g>
<g >
<title>dput (22,563,892 samples, 0.22%)</title><rect x="1061.3" y="213" width="2.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1064.31" y="223.5" ></text>
</g>
<g >
<title>__cond_resched (6,742,790 samples, 0.06%)</title><rect x="573.8" y="213" width="0.8" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="576.81" y="223.5" ></text>
</g>
<g >
<title>_copy_to_user (14,252,247 samples, 0.14%)</title><rect x="420.0" y="245" width="1.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="422.95" y="255.5" ></text>
</g>
<g >
<title>audit_reset_context (21,878,629 samples, 0.21%)</title><rect x="1087.7" y="245" width="2.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1090.65" y="255.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (220,684,578 samples, 2.11%)</title><rect x="41.6" y="309" width="24.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="44.59" y="319.5" >c..</text>
</g>
<g >
<title>__check_heap_object (170,036,780 samples, 1.63%)</title><rect x="656.9" y="213" width="19.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="659.92" y="223.5" ></text>
</g>
<g >
<title>__virt_addr_valid (218,691,751 samples, 2.09%)</title><rect x="676.1" y="213" width="24.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="679.10" y="223.5" >_..</text>
</g>
<g >
<title>__fget_light (137,749,165 samples, 1.32%)</title><rect x="387.7" y="229" width="15.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="390.66" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (29,837,873 samples, 0.29%)</title><rect x="231.1" y="293" width="3.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="234.13" y="303.5" ></text>
</g>
<g >
<title>mntput (15,808,469 samples, 0.15%)</title><rect x="1068.0" y="213" width="1.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1071.05" y="223.5" ></text>
</g>
<g >
<title>kfree (15,068,768 samples, 0.14%)</title><rect x="506.1" y="245" width="1.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="509.06" y="255.5" ></text>
</g>
<g >
<title>kmalloc_slab (85,207,885 samples, 0.81%)</title><rect x="593.3" y="213" width="9.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="596.29" y="223.5" ></text>
</g>
<g >
<title>__fdget (24,147,381 samples, 0.23%)</title><rect x="252.8" y="261" width="2.7" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="255.81" y="271.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (21,724,216 samples, 0.21%)</title><rect x="590.3" y="197" width="2.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="593.28" y="207.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,666,146 samples, 0.02%)</title><rect x="756.9" y="101" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="759.93" y="111.5" ></text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (57,517,880 samples, 0.55%)</title><rect x="784.8" y="261" width="6.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="787.81" y="271.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (26,003,479 samples, 0.25%)</title><rect x="847.5" y="245" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="850.49" y="255.5" ></text>
</g>
<g >
<title>memcpy (5,066,892 samples, 0.05%)</title><rect x="609.9" y="245" width="0.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="612.89" y="255.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (183,719,971 samples, 1.76%)</title><rect x="829.7" y="277" width="20.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="832.70" y="287.5" ></text>
</g>
<g >
<title>vmemdup_user (24,995,178 samples, 0.24%)</title><rect x="818.7" y="261" width="2.8" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="821.72" y="271.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (1,701,849 samples, 0.02%)</title><rect x="836.9" y="149" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="839.87" y="159.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (22,387,711 samples, 0.21%)</title><rect x="479.6" y="229" width="2.5" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="482.61" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,666,146 samples, 0.02%)</title><rect x="756.9" y="165" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="759.93" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_work (499,803,649 samples, 4.78%)</title><rect x="1033.7" y="261" width="56.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1036.74" y="271.5" >sysca..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,685,774 samples, 0.02%)</title><rect x="421.6" y="213" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="424.56" y="223.5" ></text>
</g>
<g >
<title>migrate_disable (34,773,449 samples, 0.33%)</title><rect x="612.4" y="245" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="615.35" y="255.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,666,146 samples, 0.02%)</title><rect x="756.9" y="117" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="759.93" y="127.5" ></text>
</g>
<g >
<title>__kmalloc_node (15,873,785 samples, 0.15%)</title><rect x="701.0" y="229" width="1.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="703.95" y="239.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (1,620,808 samples, 0.02%)</title><rect x="700.8" y="213" width="0.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="703.77" y="223.5" ></text>
</g>
<g >
<title>kmalloc_slab (6,716,606 samples, 0.06%)</title><rect x="778.4" y="213" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="781.39" y="223.5" ></text>
</g>
<g >
<title>__kmalloc_node (14,920,993 samples, 0.14%)</title><rect x="405.9" y="245" width="1.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="408.86" y="255.5" ></text>
</g>
<g >
<title>security_bpf (17,567,228 samples, 0.17%)</title><rect x="816.7" y="261" width="2.0" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="819.74" y="271.5" ></text>
</g>
<g >
<title>__check_heap_object (32,463,340 samples, 0.31%)</title><rect x="314.2" y="245" width="3.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="317.19" y="255.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (23,196,646 samples, 0.22%)</title><rect x="827.1" y="277" width="2.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="830.08" y="287.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (759,740,150 samples, 7.26%)</title><rect x="1103.3" y="309" width="85.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1106.27" y="319.5" >syscall_re..</text>
</g>
<g >
<title>__fget_light (23,507,404 samples, 0.22%)</title><rect x="403.2" y="245" width="2.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="406.20" y="255.5" ></text>
</g>
<g >
<title>should_failslab (5,007,333 samples, 0.05%)</title><rect x="592.7" y="197" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="595.73" y="207.5" ></text>
</g>
<g >
<title>path_put (19,285,897 samples, 0.18%)</title><rect x="1084.5" y="229" width="2.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1087.53" y="239.5" ></text>
</g>
<g >
<title>security_bpf (32,459,641 samples, 0.31%)</title><rect x="628.6" y="245" width="3.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="631.59" y="255.5" ></text>
</g>
<g >
<title>clock_gettime@plt (12,564,268 samples, 0.12%)</title><rect x="66.5" y="309" width="1.4" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="69.49" y="319.5" ></text>
</g>
<g >
<title>syscall (9,921,211,175 samples, 94.86%)</title><rect x="69.7" y="325" width="1119.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="72.69" y="335.5" >syscall</text>
</g>
<g >
<title>vmemdup_user (1,316,316,799 samples, 12.59%)</title><rect x="632.3" y="245" width="148.5" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="635.25" y="255.5" >vmemdup_user</text>
</g>
<g >
<title>_copy_to_user (23,417,969 samples, 0.22%)</title><rect x="782.2" y="261" width="2.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="785.17" y="271.5" ></text>
</g>
<g >
<title>migrate_enable (17,595,638 samples, 0.17%)</title><rect x="616.3" y="245" width="2.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="619.27" y="255.5" ></text>
</g>
<g >
<title>__kmalloc_node (552,289,175 samples, 5.28%)</title><rect x="715.3" y="213" width="62.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="718.32" y="223.5" >__kmal..</text>
</g>
<g >
<title>lookup_nulls_elem_raw (53,460,946 samples, 0.51%)</title><rect x="466.2" y="213" width="6.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="469.18" y="223.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,685,774 samples, 0.02%)</title><rect x="421.6" y="229" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="424.56" y="239.5" ></text>
</g>
<g >
<title>kfree (37,106,548 samples, 0.35%)</title><rect x="1063.9" y="213" width="4.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1066.86" y="223.5" ></text>
</g>
<g >
<title>tick_sched_timer (1,701,849 samples, 0.02%)</title><rect x="836.9" y="181" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="839.87" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,701,849 samples, 0.02%)</title><rect x="836.9" y="229" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="839.87" y="239.5" ></text>
</g>
<g >
<title>__sys_bpf (4,655,488,658 samples, 44.51%)</title><rect x="255.5" y="261" width="525.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="258.54" y="271.5" >__sys_bpf</text>
</g>
<g >
<title>_copy_from_user (12,538,969 samples, 0.12%)</title><rect x="780.8" y="261" width="1.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="783.76" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,701,849 samples, 0.02%)</title><rect x="836.9" y="197" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="839.87" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,666,146 samples, 0.02%)</title><rect x="756.9" y="181" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="759.93" y="191.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (1,701,849 samples, 0.02%)</title><rect x="836.9" y="165" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="839.87" y="175.5" ></text>
</g>
<g >
<title>__virt_addr_valid (106,089,177 samples, 1.01%)</title><rect x="368.4" y="229" width="12.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="371.39" y="239.5" ></text>
</g>
<g >
<title>check_stack_object (15,853,930 samples, 0.15%)</title><rect x="708.6" y="229" width="1.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="711.65" y="239.5" ></text>
</g>
<g >
<title>rep_movs_alternative (91,584,027 samples, 0.88%)</title><rect x="618.3" y="245" width="10.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="621.26" y="255.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,701,849 samples, 0.02%)</title><rect x="836.9" y="213" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="839.87" y="223.5" ></text>
</g>
<g >
<title>should_failslab (2,539,540 samples, 0.02%)</title><rect x="762.4" y="181" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="765.38" y="191.5" ></text>
</g>
<g >
<title>update_wall_time (1,701,849 samples, 0.02%)</title><rect x="836.9" y="133" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="839.87" y="143.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (165,938,078 samples, 1.59%)</title><rect x="574.6" y="213" width="18.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="577.57" y="223.5" ></text>
</g>
<g >
<title>timekeeping_advance (1,701,849 samples, 0.02%)</title><rect x="836.9" y="117" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="839.87" y="127.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (1,685,774 samples, 0.02%)</title><rect x="421.6" y="133" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="424.56" y="143.5" ></text>
</g>
<g >
<title>memset_orig (28,442,281 samples, 0.27%)</title><rect x="603.5" y="213" width="3.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="606.55" y="223.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (1,685,774 samples, 0.02%)</title><rect x="421.6" y="149" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="424.56" y="159.5" ></text>
</g>
<g >
<title>__check_object_size (38,442,134 samples, 0.37%)</title><rect x="248.5" y="261" width="4.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="251.47" y="271.5" ></text>
</g>
<g >
<title>audit_reset_context (337,350,042 samples, 3.23%)</title><rect x="1040.0" y="229" width="38.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1042.96" y="239.5" >aud..</text>
</g>
<g >
<title>do_syscall_64 (7,604,170,288 samples, 72.70%)</title><rect x="235.0" y="293" width="857.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="237.97" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>kvmalloc_node (22,468,920 samples, 0.21%)</title><rect x="800.6" y="261" width="2.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="803.58" y="271.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (4,143,657 samples, 0.04%)</title><rect x="234.5" y="293" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="237.50" y="303.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (11,825,306 samples, 0.11%)</title><rect x="607.0" y="229" width="1.3" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="609.95" y="239.5" ></text>
</g>
<g >
<title>all (10,459,333,728 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>syscall_exit_work (8,357,711 samples, 0.08%)</title><rect x="1090.1" y="277" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1093.12" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,701,849 samples, 0.02%)</title><rect x="836.9" y="245" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="839.87" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,280,481 samples, 0.02%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.74" y="335.5" ></text>
</g>
<g >
<title>_copy_from_user (58,206,311 samples, 0.56%)</title><rect x="413.4" y="245" width="6.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="416.39" y="255.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,553,129 samples, 0.02%)</title><rect x="85.3" y="309" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="88.34" y="319.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (9,238,131 samples, 0.09%)</title><rect x="710.4" y="229" width="1.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="713.44" y="239.5" ></text>
</g>
<g >
<title>__check_heap_object (151,636,066 samples, 1.45%)</title><rect x="351.3" y="229" width="17.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="354.29" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,701,849 samples, 0.02%)</title><rect x="836.9" y="261" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="839.87" y="271.5" ></text>
</g>
<g >
<title>update_wall_time (1,666,146 samples, 0.02%)</title><rect x="756.9" y="53" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="759.93" y="63.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (15,832,405 samples, 0.15%)</title><rect x="1091.1" y="277" width="1.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1094.07" y="287.5" ></text>
</g>
<g >
<title>__rcu_read_lock (5,843,170 samples, 0.06%)</title><rect x="441.1" y="229" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="444.14" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,685,774 samples, 0.02%)</title><rect x="421.6" y="197" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="424.56" y="207.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (23,263,387 samples, 0.22%)</title><rect x="791.3" y="261" width="2.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="794.30" y="271.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (30,069,682 samples, 0.29%)</title><rect x="502.7" y="245" width="3.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="505.67" y="255.5" ></text>
</g>
<g >
<title>kvmalloc_node (438,554,067 samples, 4.19%)</title><rect x="560.4" y="245" width="49.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="563.42" y="255.5" >kvma..</text>
</g>
<g >
<title>__kmalloc_node (367,712,543 samples, 3.52%)</title><rect x="565.5" y="229" width="41.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="568.47" y="239.5" >__k..</text>
</g>
<g >
<title>should_failslab (8,471,684 samples, 0.08%)</title><rect x="776.7" y="197" width="0.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="779.68" y="207.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (6,730,206 samples, 0.06%)</title><rect x="777.6" y="213" width="0.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="780.63" y="223.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (12,443,057 samples, 0.12%)</title><rect x="518.9" y="229" width="1.4" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="521.86" y="239.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (186,302,121 samples, 1.78%)</title><rect x="458.6" y="229" width="21.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="461.59" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,687,661 samples, 0.02%)</title><rect x="380.4" y="213" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="383.36" y="223.5" ></text>
</g>
<g >
<title>__kmem_cache_free (60,952,644 samples, 0.58%)</title><rect x="512.0" y="229" width="6.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="514.99" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,699,840 samples, 0.02%)</title><rect x="85.4" y="293" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="88.44" y="303.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (359,155,345 samples, 3.43%)</title><rect x="722.1" y="197" width="40.6" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="725.14" y="207.5" >__k..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,666,146 samples, 0.02%)</title><rect x="756.9" y="149" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="759.93" y="159.5" ></text>
</g>
<g >
<title>should_failslab (1,712,002 samples, 0.02%)</title><rect x="606.8" y="213" width="0.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="609.76" y="223.5" ></text>
</g>
<g >
<title>memchr_inv (120,758,880 samples, 1.15%)</title><rect x="803.1" y="261" width="13.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="806.12" y="271.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (1,666,146 samples, 0.02%)</title><rect x="756.9" y="69" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="759.93" y="79.5" ></text>
</g>
<g >
<title>kfree (57,731,430 samples, 0.55%)</title><rect x="1078.0" y="229" width="6.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1081.02" y="239.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1,685,774 samples, 0.02%)</title><rect x="421.6" y="181" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="424.56" y="191.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (570,186,318 samples, 5.45%)</title><rect x="421.8" y="245" width="64.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="424.75" y="255.5" >bpf_map..</text>
</g>
<g >
<title>kvfree (14,071,335 samples, 0.13%)</title><rect x="799.0" y="261" width="1.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="802.00" y="271.5" ></text>
</g>
<g >
<title>main (386,202,498 samples, 3.69%)</title><rect x="26.1" y="325" width="43.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="29.12" y="335.5" >main</text>
</g>
<g >
<title>update_wall_time (1,685,774 samples, 0.02%)</title><rect x="421.6" y="117" width="0.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="424.56" y="127.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (25,218,913 samples, 0.24%)</title><rect x="834.0" y="261" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="837.03" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (5,081,257,584 samples, 48.58%)</title><rect x="248.3" y="277" width="573.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="251.29" y="287.5" >__x64_sys_bpf</text>
</g>
<g >
<title>tick_sched_do_timer (1,666,146 samples, 0.02%)</title><rect x="756.9" y="85" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="759.93" y="95.5" ></text>
</g>
<g >
<title>[unknown] (3,259,884 samples, 0.03%)</title><rect x="10.0" y="341" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>bpf_map_value_size (44,920,549 samples, 0.43%)</title><rect x="793.9" y="261" width="5.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="796.93" y="271.5" ></text>
</g>
<g >
<title>__libc_start_call_main (10,452,014,086 samples, 99.93%)</title><rect x="10.4" y="341" width="1179.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.37" y="351.5" >__libc_start_call_main</text>
</g>
<g >
<title>memset_orig (65,127,050 samples, 0.62%)</title><rect x="769.3" y="197" width="7.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="772.33" y="207.5" ></text>
</g>
<g >
<title>get_timestamp (29,343,746 samples, 0.28%)</title><rect x="22.8" y="325" width="3.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="25.81" y="335.5" ></text>
</g>
<g >
<title>timekeeping_advance (1,685,774 samples, 0.02%)</title><rect x="421.6" y="101" width="0.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="424.56" y="111.5" ></text>
</g>
<g >
<title>memcmp (65,596,011 samples, 0.63%)</title><rect x="472.2" y="213" width="7.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="475.21" y="223.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (160,776,677 samples, 1.54%)</title><rect x="48.3" y="293" width="18.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="51.26" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,687,661 samples, 0.02%)</title><rect x="380.4" y="229" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="383.36" y="239.5" ></text>
</g>
<g >
<title>__sys_bpf (2,280,481 samples, 0.02%)</title><rect x="1189.7" y="277" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.74" y="287.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (440,209,877 samples, 4.21%)</title><rect x="1038.0" y="245" width="49.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1040.99" y="255.5" >__aud..</text>
</g>
<g >
<title>bpf_map_lookup_elem (110,286,753 samples, 1.05%)</title><rect x="10.4" y="325" width="12.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.37" y="335.5" ></text>
</g>
<g >
<title>unroll_tree_refs (8,383,313 samples, 0.08%)</title><rect x="1086.7" y="229" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1089.71" y="239.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (38,009,780 samples, 0.36%)</title><rect x="1095.9" y="293" width="4.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1098.87" y="303.5" ></text>
</g>
<g >
<title>check_stack_object (112,826,605 samples, 1.08%)</title><rect x="486.1" y="245" width="12.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="489.08" y="255.5" ></text>
</g>
<g >
<title>__sys_bpf (19,974,164 samples, 0.19%)</title><rect x="246.0" y="277" width="2.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="249.03" y="287.5" ></text>
</g>
<g >
<title>__check_object_size (618,791,822 samples, 5.92%)</title><rect x="317.9" y="245" width="69.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="320.85" y="255.5" >__check..</text>
</g>
<g >
<title>syscall (2,280,481 samples, 0.02%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.74" y="351.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (12,501,588 samples, 0.12%)</title><rect x="1031.3" y="245" width="1.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1034.29" y="255.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (20,814,136 samples, 0.20%)</title><rect x="767.0" y="197" width="2.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="769.98" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,970,034,195 samples, 85.76%)</title><rect x="88.2" y="309" width="1012.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="91.18" y="319.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (46,631,943 samples, 0.45%)</title><rect x="757.1" y="181" width="5.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="760.12" y="191.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (9,135,182 samples, 0.09%)</title><rect x="1032.7" y="261" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1035.71" y="271.5" ></text>
</g>
</g>
</svg>
