<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>__cond_resched (7,529,231 samples, 0.07%)</title><rect x="722.0" y="53" width="0.9" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="725.03" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,849,931,445 samples, 85.32%)</title><rect x="91.0" y="165" width="1006.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="94.02" y="175.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>exit_mmap (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="85" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.53" y="95.5" ></text>
</g>
<g >
<title>syscall (9,810,145,784 samples, 94.58%)</title><rect x="72.1" y="181" width="1116.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="75.06" y="191.5" >syscall</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,672,486 samples, 0.02%)</title><rect x="88.3" y="149" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="91.28" y="159.5" ></text>
</g>
<g >
<title>dput (17,410,324 samples, 0.17%)</title><rect x="1063.2" y="69" width="2.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1066.24" y="79.5" ></text>
</g>
<g >
<title>[unknown] (3,194,904 samples, 0.03%)</title><rect x="10.0" y="197" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>should_failslab (3,220,562 samples, 0.03%)</title><rect x="769.8" y="53" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="772.78" y="63.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,672,486 samples, 0.02%)</title><rect x="88.3" y="117" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="91.28" y="127.5" ></text>
</g>
<g >
<title>__kmalloc_node (18,408,190 samples, 0.18%)</title><rect x="701.1" y="85" width="2.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="704.12" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (22,431,429 samples, 0.22%)</title><rect x="88.5" y="165" width="2.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="91.47" y="175.5" ></text>
</g>
<g >
<title>bpf_map_lookup_elem (92,690,219 samples, 0.89%)</title><rect x="10.4" y="181" width="10.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.36" y="191.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (44,937,838 samples, 0.43%)</title><rect x="33.1" y="165" width="5.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="36.09" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_work (467,052,841 samples, 4.50%)</title><rect x="1034.6" y="117" width="53.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1037.62" y="127.5" >sysca..</text>
</g>
<g >
<title>__audit_syscall_exit (7,422,779 samples, 0.07%)</title><rect x="1026.3" y="117" width="0.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1029.35" y="127.5" ></text>
</g>
<g >
<title>kfree (27,150,340 samples, 0.26%)</title><rect x="1065.2" y="69" width="3.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1068.22" y="79.5" ></text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (40,120,467 samples, 0.39%)</title><rect x="783.0" y="117" width="4.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="785.98" y="127.5" ></text>
</g>
<g >
<title>kfree (17,392,999 samples, 0.17%)</title><rect x="502.1" y="101" width="2.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="505.11" y="111.5" ></text>
</g>
<g >
<title>migrate_enable (21,501,662 samples, 0.21%)</title><rect x="612.0" y="101" width="2.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="614.95" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="181" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.53" y="191.5" ></text>
</g>
<g >
<title>kfree (355,400,177 samples, 3.43%)</title><rect x="515.5" y="85" width="40.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="518.46" y="95.5" >kfree</text>
</g>
<g >
<title>bpf_map_copy_value (17,200,424 samples, 0.17%)</title><rect x="787.5" y="117" width="2.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="790.55" y="127.5" ></text>
</g>
<g >
<title>syscall_exit_work (8,906,558 samples, 0.09%)</title><rect x="1087.8" y="133" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1090.75" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (1,577,470 samples, 0.02%)</title><rect x="10.2" y="133" width="0.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="13.18" y="143.5" ></text>
</g>
<g >
<title>mas_next_slot (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="37" width="0.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1192.53" y="47.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (42,282,211 samples, 0.41%)</title><rect x="457.9" y="69" width="4.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="460.95" y="79.5" ></text>
</g>
<g >
<title>memchr_inv (121,781,482 samples, 1.17%)</title><rect x="799.6" y="117" width="13.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="802.57" y="127.5" ></text>
</g>
<g >
<title>mntput (16,691,731 samples, 0.16%)</title><rect x="1068.3" y="69" width="1.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1071.31" y="79.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (15,068,389 samples, 0.15%)</title><rect x="770.1" y="69" width="1.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="773.14" y="79.5" ></text>
</g>
<g >
<title>all (10,372,161,041 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>memset_orig (35,467,178 samples, 0.34%)</title><rect x="600.7" y="69" width="4.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="603.67" y="79.5" ></text>
</g>
<g >
<title>__check_heap_object (78,747,243 samples, 0.76%)</title><rect x="358.6" y="85" width="9.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="361.63" y="95.5" ></text>
</g>
<g >
<title>audit_reset_context (313,428,594 samples, 3.02%)</title><rect x="1042.0" y="85" width="35.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1044.99" y="95.5" >aud..</text>
</g>
<g >
<title>unroll_tree_refs (10,798,022 samples, 0.10%)</title><rect x="1084.1" y="85" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1087.09" y="95.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (186,139,886 samples, 1.79%)</title><rect x="45.7" y="149" width="21.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="48.72" y="159.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (12,256,085 samples, 0.12%)</title><rect x="402.4" y="101" width="1.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="405.36" y="111.5" ></text>
</g>
<g >
<title>kvmalloc_node (551,223,385 samples, 5.31%)</title><rect x="710.8" y="85" width="62.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="713.77" y="95.5" >kvmall..</text>
</g>
<g >
<title>__audit_syscall_exit (404,195,573 samples, 3.90%)</title><rect x="1039.3" y="101" width="46.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1042.33" y="111.5" >__au..</text>
</g>
<g >
<title>__rcu_read_lock (2,442,275 samples, 0.02%)</title><rect x="402.1" y="101" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="405.08" y="111.5" ></text>
</g>
<g >
<title>main (431,312,741 samples, 4.16%)</title><rect x="23.0" y="181" width="49.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="25.99" y="191.5" >main</text>
</g>
<g >
<title>kmalloc_slab (14,275,974 samples, 0.14%)</title><rect x="771.9" y="69" width="1.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="774.86" y="79.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (1,572,525 samples, 0.02%)</title><rect x="1189.7" y="149" width="0.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.72" y="159.5" ></text>
</g>
<g >
<title>_copy_from_user (18,385,231 samples, 0.18%)</title><rect x="704.7" y="85" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="707.73" y="95.5" ></text>
</g>
<g >
<title>__kmem_cache_free (56,829,840 samples, 0.55%)</title><rect x="507.6" y="85" width="6.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="510.57" y="95.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (14,810,167 samples, 0.14%)</title><rect x="709.1" y="85" width="1.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="712.09" y="95.5" ></text>
</g>
<g >
<title>memcmp (71,038,762 samples, 0.68%)</title><rect x="462.8" y="69" width="8.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="465.76" y="79.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (24,849,618 samples, 0.24%)</title><rect x="1097.8" y="165" width="2.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1100.84" y="175.5" ></text>
</g>
<g >
<title>__fget_light (20,848,047 samples, 0.20%)</title><rect x="397.6" y="101" width="2.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="400.58" y="111.5" ></text>
</g>
<g >
<title>map_benchmark (10,372,095,720 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >map_benchmark</text>
</g>
<g >
<title>entry_SYSCALL_64 (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="197" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.53" y="207.5" ></text>
</g>
<g >
<title>syscall (1,577,470 samples, 0.02%)</title><rect x="10.2" y="181" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="13.18" y="191.5" ></text>
</g>
<g >
<title>get_timestamp (23,875,273 samples, 0.23%)</title><rect x="69.3" y="165" width="2.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="72.34" y="175.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (17,327,933 samples, 0.17%)</title><rect x="752.5" y="37" width="2.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="755.50" y="47.5" ></text>
</g>
<g >
<title>__check_heap_object (172,512,458 samples, 1.66%)</title><rect x="650.6" y="69" width="19.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="653.63" y="79.5" ></text>
</g>
<g >
<title>_copy_from_user (52,287,081 samples, 0.50%)</title><rect x="406.7" y="101" width="5.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="409.68" y="111.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (21,770,108 samples, 0.21%)</title><rect x="824.4" y="133" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="827.43" y="143.5" ></text>
</g>
<g >
<title>check_stack_object (130,076,827 samples, 1.25%)</title><rect x="478.1" y="101" width="14.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="481.13" y="111.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (767,850,253 samples, 7.40%)</title><rect x="1100.8" y="165" width="87.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1103.77" y="175.5" >syscall_re..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,672,486 samples, 0.02%)</title><rect x="88.3" y="165" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="91.28" y="175.5" ></text>
</g>
<g >
<title>__kmalloc_node (487,864,259 samples, 4.70%)</title><rect x="714.6" y="69" width="55.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="717.64" y="79.5" >__kma..</text>
</g>
<g >
<title>should_failslab (5,891,253 samples, 0.06%)</title><rect x="754.5" y="37" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="757.47" y="47.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (27,987,168 samples, 0.27%)</title><rect x="590.6" y="53" width="3.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="593.64" y="63.5" ></text>
</g>
<g >
<title>__virt_addr_valid (19,913,373 samples, 0.19%)</title><rect x="403.7" y="101" width="2.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="406.75" y="111.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (252,177,473 samples, 2.43%)</title><rect x="38.2" y="165" width="28.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="41.20" y="175.5" >cl..</text>
</g>
<g >
<title>__kmem_cache_free (263,103,952 samples, 2.54%)</title><rect x="526.0" y="69" width="29.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="528.96" y="79.5" >__..</text>
</g>
<g >
<title>kvmalloc_node (445,622,143 samples, 4.30%)</title><rect x="555.9" y="101" width="50.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="558.89" y="111.5" >kvmal..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (25,873,249 samples, 0.25%)</title><rect x="1090.6" y="149" width="2.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1093.57" y="159.5" ></text>
</g>
<g >
<title>kmalloc_slab (41,134,690 samples, 0.40%)</title><rect x="594.4" y="69" width="4.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="597.37" y="79.5" ></text>
</g>
<g >
<title>__cond_resched (11,754,091 samples, 0.11%)</title><rect x="568.5" y="69" width="1.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="571.50" y="79.5" ></text>
</g>
<g >
<title>should_failslab (4,840,794 samples, 0.05%)</title><rect x="593.8" y="53" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="596.82" y="63.5" ></text>
</g>
<g >
<title>syscall@plt (11,607,183 samples, 0.11%)</title><rect x="1188.1" y="181" width="1.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1191.12" y="191.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (38,101,237 samples, 0.37%)</title><rect x="1093.5" y="149" width="4.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1096.51" y="159.5" ></text>
</g>
<g >
<title>_copy_to_user (41,499,229 samples, 0.40%)</title><rect x="778.3" y="117" width="4.7" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="781.26" y="127.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (5,865,812 samples, 0.06%)</title><rect x="406.0" y="101" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="409.02" y="111.5" ></text>
</g>
<g >
<title>path_put (21,685,851 samples, 0.21%)</title><rect x="1081.6" y="85" width="2.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1084.62" y="95.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (14,801,189 samples, 0.14%)</title><rect x="831.5" y="117" width="1.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="834.51" y="127.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (12,530,548 samples, 0.12%)</title><rect x="514.0" y="85" width="1.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="517.03" y="95.5" ></text>
</g>
<g >
<title>migrate_enable (48,296,048 samples, 0.47%)</title><rect x="472.6" y="85" width="5.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="475.64" y="95.5" ></text>
</g>
<g >
<title>rep_movs_alternative (14,802,800 samples, 0.14%)</title><rect x="773.5" y="85" width="1.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="776.48" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,572,525 samples, 0.02%)</title><rect x="1189.7" y="181" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.72" y="191.5" ></text>
</g>
<g >
<title>__check_object_size (74,735,709 samples, 0.72%)</title><rect x="251.3" y="117" width="8.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="254.28" y="127.5" ></text>
</g>
<g >
<title>kfree (34,914,397 samples, 0.34%)</title><rect x="1077.6" y="85" width="4.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1080.65" y="95.5" ></text>
</g>
<g >
<title>memcpy_orig (10,765,718 samples, 0.10%)</title><rect x="606.9" y="101" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="609.88" y="111.5" ></text>
</g>
<g >
<title>security_bpf (25,568,970 samples, 0.25%)</title><rect x="623.0" y="101" width="2.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="625.97" y="111.5" ></text>
</g>
<g >
<title>kmalloc_slab (46,634,850 samples, 0.45%)</title><rect x="755.1" y="53" width="5.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="758.14" y="63.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (15,773,209 samples, 0.15%)</title><rect x="470.8" y="85" width="1.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="473.84" y="95.5" ></text>
</g>
<g >
<title>syscall (1,572,525 samples, 0.02%)</title><rect x="1189.7" y="197" width="0.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.72" y="207.5" ></text>
</g>
<g >
<title>bpf_map_value_size (51,696,783 samples, 0.50%)</title><rect x="789.5" y="117" width="5.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="792.50" y="127.5" ></text>
</g>
<g >
<title>htab_map_hash (144,016,822 samples, 1.39%)</title><rect x="434.1" y="85" width="16.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="437.13" y="95.5" ></text>
</g>
<g >
<title>amd_clear_divider (50,646,938 samples, 0.49%)</title><rect x="818.7" y="133" width="5.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="821.67" y="143.5" ></text>
</g>
<g >
<title>__virt_addr_valid (71,902,960 samples, 0.69%)</title><rect x="367.6" y="85" width="8.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="370.59" y="95.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (4,223,367 samples, 0.04%)</title><rect x="235.4" y="149" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="238.35" y="159.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (55,742,152 samples, 0.54%)</title><rect x="495.8" y="101" width="6.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="498.77" y="111.5" ></text>
</g>
<g >
<title>rep_movs_alternative (75,330,428 samples, 0.73%)</title><rect x="614.4" y="101" width="8.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="617.40" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,577,470 samples, 0.02%)</title><rect x="10.2" y="165" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.18" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (4,987,324,324 samples, 48.08%)</title><rect x="251.3" y="133" width="567.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="254.28" y="143.5" >__x64_sys_bpf</text>
</g>
<g >
<title>__x64_sys_bpf (49,891,383 samples, 0.48%)</title><rect x="229.7" y="149" width="5.7" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="232.68" y="159.5" ></text>
</g>
<g >
<title>__virt_addr_valid (268,818,361 samples, 2.59%)</title><rect x="670.3" y="69" width="30.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="673.25" y="79.5" >__..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,672,486 samples, 0.02%)</title><rect x="88.3" y="133" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="91.28" y="143.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (549,119,724 samples, 5.29%)</title><rect x="415.7" y="101" width="62.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="418.66" y="111.5" >bpf_ma..</text>
</g>
<g >
<title>clock_gettime@plt (21,541,196 samples, 0.21%)</title><rect x="66.9" y="165" width="2.4" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="69.89" y="175.5" ></text>
</g>
<g >
<title>__check_heap_object (29,621,964 samples, 0.29%)</title><rect x="634.6" y="85" width="3.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="637.60" y="95.5" ></text>
</g>
<g >
<title>__check_heap_object (15,823,553 samples, 0.15%)</title><rect x="330.4" y="101" width="1.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="333.37" y="111.5" ></text>
</g>
<g >
<title>_copy_from_user (27,204,185 samples, 0.26%)</title><rect x="775.2" y="117" width="3.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="778.17" y="127.5" ></text>
</g>
<g >
<title>kvfree (455,378,150 samples, 4.39%)</title><rect x="504.1" y="101" width="51.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="507.09" y="111.5" >kvfree</text>
</g>
<g >
<title>unroll_tree_refs (16,507,670 samples, 0.16%)</title><rect x="1075.8" y="69" width="1.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1078.77" y="79.5" ></text>
</g>
<g >
<title>__mmput (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="101" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1192.53" y="111.5" ></text>
</g>
<g >
<title>__check_object_size (438,787,775 samples, 4.23%)</title><rect x="332.2" y="101" width="49.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="335.17" y="111.5" >__che..</text>
</g>
<g >
<title>__kmem_cache_alloc_node (283,516,904 samples, 2.73%)</title><rect x="722.9" y="53" width="32.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="725.89" y="63.5" >__..</text>
</g>
<g >
<title>__libc_start_call_main (10,364,057,783 samples, 99.92%)</title><rect x="10.4" y="197" width="1179.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.36" y="207.5" >__libc_start_call_main</text>
</g>
<g >
<title>fpregs_assert_state_consistent (6,629,068 samples, 0.06%)</title><rect x="1033.9" y="117" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1036.86" y="127.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (215,624,738 samples, 2.08%)</title><rect x="569.8" y="69" width="24.6" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="572.84" y="79.5" >_..</text>
</g>
<g >
<title>htab_map_lookup_elem (178,679,538 samples, 1.72%)</title><rect x="450.5" y="85" width="20.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="453.51" y="95.5" ></text>
</g>
<g >
<title>__sys_bpf (1,572,525 samples, 0.02%)</title><rect x="1189.7" y="133" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.72" y="143.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (14,179,478 samples, 0.14%)</title><rect x="599.1" y="69" width="1.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="602.05" y="79.5" ></text>
</g>
<g >
<title>mas_find (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="53" width="0.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1192.53" y="63.5" ></text>
</g>
<g >
<title>vmemdup_user (29,582,747 samples, 0.29%)</title><rect x="815.3" y="117" width="3.4" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="818.30" y="127.5" ></text>
</g>
<g >
<title>__rcu_read_lock (5,885,823 samples, 0.06%)</title><rect x="433.5" y="85" width="0.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="436.46" y="95.5" ></text>
</g>
<g >
<title>vmemdup_user (1,312,249,242 samples, 12.65%)</title><rect x="625.9" y="101" width="149.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="628.88" y="111.5" >vmemdup_user</text>
</g>
<g >
<title>__check_object_size (555,114,823 samples, 5.35%)</title><rect x="638.0" y="85" width="63.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="640.97" y="95.5" >__chec..</text>
</g>
<g >
<title>do_exit (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="133" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1192.53" y="143.5" ></text>
</g>
<g >
<title>__virt_addr_valid (13,323,936 samples, 0.13%)</title><rect x="703.2" y="85" width="1.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="706.22" y="95.5" ></text>
</g>
<g >
<title>__fget_light (136,136,584 samples, 1.31%)</title><rect x="382.1" y="85" width="15.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="385.09" y="95.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (25,043,295 samples, 0.24%)</title><rect x="846.0" y="101" width="2.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="849.04" y="111.5" ></text>
</g>
<g >
<title>__kmalloc_node (378,676,607 samples, 3.65%)</title><rect x="562.1" y="85" width="43.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="565.08" y="95.5" >__km..</text>
</g>
<g >
<title>htab_map_lookup_elem (24,929,858 samples, 0.24%)</title><rect x="492.9" y="101" width="2.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="495.93" y="111.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (15,813,667 samples, 0.15%)</title><rect x="1088.8" y="133" width="1.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1091.77" y="143.5" ></text>
</g>
<g >
<title>__fdget (136,136,584 samples, 1.31%)</title><rect x="382.1" y="101" width="15.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="385.09" y="111.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (193,259,284 samples, 1.86%)</title><rect x="826.9" y="133" width="22.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="829.91" y="143.5" >s..</text>
</g>
<g >
<title>kvfree (24,289,166 samples, 0.23%)</title><rect x="795.4" y="117" width="2.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="798.39" y="127.5" ></text>
</g>
<g >
<title>kmalloc_slab (5,850,232 samples, 0.06%)</title><rect x="605.9" y="85" width="0.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="608.92" y="95.5" ></text>
</g>
<g >
<title>free_pgtables (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="69" width="0.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1192.53" y="79.5" ></text>
</g>
<g >
<title>memcpy (2,522,519 samples, 0.02%)</title><rect x="606.6" y="101" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="609.59" y="111.5" ></text>
</g>
<g >
<title>__sys_bpf (4,507,132,417 samples, 43.45%)</title><rect x="262.4" y="117" width="512.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="265.41" y="127.5" >__sys_bpf</text>
</g>
<g >
<title>kvmalloc_node (12,487,687 samples, 0.12%)</title><rect x="798.1" y="117" width="1.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="801.15" y="127.5" ></text>
</g>
<g >
<title>[vmlinux] (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="165" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1192.53" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,572,525 samples, 0.02%)</title><rect x="1189.7" y="165" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.72" y="175.5" ></text>
</g>
<g >
<title>check_stack_object (19,884,840 samples, 0.19%)</title><rect x="706.8" y="85" width="2.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="709.83" y="95.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (58,652,648 samples, 0.57%)</title><rect x="1027.2" y="117" width="6.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1030.19" y="127.5" ></text>
</g>
<g >
<title>__fdget (23,081,218 samples, 0.22%)</title><rect x="259.8" y="117" width="2.6" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="262.78" y="127.5" ></text>
</g>
<g >
<title>check_stack_object (55,566,639 samples, 0.54%)</title><rect x="375.8" y="85" width="6.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="378.77" y="95.5" ></text>
</g>
<g >
<title>path_put (48,899,044 samples, 0.47%)</title><rect x="1070.2" y="69" width="5.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1073.21" y="79.5" ></text>
</g>
<g >
<title>get_timestamp (18,301,856 samples, 0.18%)</title><rect x="20.9" y="181" width="2.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="23.91" y="191.5" ></text>
</g>
<g >
<title>memset_orig (66,444,628 samples, 0.64%)</title><rect x="762.2" y="53" width="7.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="765.22" y="63.5" ></text>
</g>
<g >
<title>audit_reset_context (21,425,517 samples, 0.21%)</title><rect x="1085.3" y="101" width="2.5" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1088.32" y="111.5" ></text>
</g>
<g >
<title>mmput (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="117" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1192.53" y="127.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (137,203,533 samples, 1.32%)</title><rect x="833.3" y="117" width="15.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="836.28" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,577,470 samples, 0.02%)</title><rect x="10.2" y="149" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.18" y="159.5" ></text>
</g>
<g >
<title>__kmalloc_node (18,723,978 samples, 0.18%)</title><rect x="399.9" y="101" width="2.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="402.95" y="111.5" ></text>
</g>
<g >
<title>migrate_disable (33,859,683 samples, 0.33%)</title><rect x="608.1" y="101" width="3.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="611.10" y="111.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,099,567,589 samples, 20.24%)</title><rect x="848.9" y="133" width="238.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="851.89" y="143.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>__sys_bpf (1,577,470 samples, 0.02%)</title><rect x="10.2" y="117" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="13.18" y="127.5" ></text>
</g>
<g >
<title>_copy_to_user (25,800,386 samples, 0.25%)</title><rect x="412.6" y="101" width="3.0" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="415.63" y="111.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (17,268,078 samples, 0.17%)</title><rect x="1031.9" y="101" width="2.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1034.90" y="111.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (2,531,296 samples, 0.02%)</title><rect x="700.8" y="69" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="703.84" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (7,513,072,211 samples, 72.43%)</title><rect x="235.8" y="149" width="854.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="238.83" y="159.5" >do_syscall_64</text>
</g>
<g >
<title>security_bpf (16,512,810 samples, 0.16%)</title><rect x="813.4" y="117" width="1.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="816.42" y="127.5" ></text>
</g>
<g >
<title>do_group_exit (1,713,022 samples, 0.02%)</title><rect x="1189.5" y="149" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1192.53" y="159.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (15,565,141 samples, 0.15%)</title><rect x="760.4" y="53" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="763.45" y="63.5" ></text>
</g>
<g >
<title>__sys_bpf (34,509,819 samples, 0.33%)</title><rect x="247.4" y="133" width="3.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="250.35" y="143.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (6,665,187 samples, 0.06%)</title><rect x="605.2" y="85" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="608.16" y="95.5" ></text>
</g>
<g >
<title>should_failslab (4,085,558 samples, 0.04%)</title><rect x="604.7" y="69" width="0.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="607.70" y="79.5" ></text>
</g>
</g>
</svg>
