<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>__rcu_read_unlock (4,532,379 samples, 0.16%)</title><rect x="378.9" y="213" width="1.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="381.89" y="223.5" ></text>
</g>
<g >
<title>syscall (1,387,335 samples, 0.05%)</title><rect x="1189.4" y="309" width="0.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1192.42" y="319.5" ></text>
</g>
<g >
<title>task_tick_fair (819,425 samples, 0.03%)</title><rect x="202.2" y="101" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="205.23" y="111.5" ></text>
</g>
<g >
<title>audit_reset_context (7,448,089 samples, 0.26%)</title><rect x="1070.6" y="213" width="3.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1073.59" y="223.5" ></text>
</g>
<g >
<title>__cond_resched (1,415,246 samples, 0.05%)</title><rect x="700.1" y="165" width="0.5" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="703.06" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (8,247,684 samples, 0.28%)</title><rect x="199.2" y="261" width="3.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="202.21" y="271.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1,633,902 samples, 0.06%)</title><rect x="1016.4" y="229" width="0.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1019.37" y="239.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (3,534,571 samples, 0.12%)</title><rect x="743.5" y="165" width="1.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="746.48" y="175.5" ></text>
</g>
<g >
<title>kmalloc_slab (3,835,828 samples, 0.13%)</title><rect x="580.8" y="197" width="1.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="583.77" y="207.5" ></text>
</g>
<g >
<title>should_failslab (706,419 samples, 0.02%)</title><rect x="568.5" y="165" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="571.48" y="175.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (797,829 samples, 0.03%)</title><rect x="1046.6" y="117" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1049.55" y="127.5" ></text>
</g>
<g >
<title>__check_object_size (131,958,052 samples, 4.54%)</title><rect x="307.0" y="213" width="53.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="309.98" y="223.5" >__che..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (797,829 samples, 0.03%)</title><rect x="1046.6" y="149" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1049.55" y="159.5" ></text>
</g>
<g >
<title>__virt_addr_valid (6,840,116 samples, 0.24%)</title><rect x="680.9" y="197" width="2.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="683.85" y="207.5" ></text>
</g>
<g >
<title>bpf_jit_binary_pack_alloc (677,407 samples, 0.02%)</title><rect x="1189.4" y="181" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1192.42" y="191.5" ></text>
</g>
<g >
<title>clear_page_erms (709,928 samples, 0.02%)</title><rect x="1189.7" y="101" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1192.70" y="111.5" ></text>
</g>
<g >
<title>check_stack_object (4,569,289 samples, 0.16%)</title><rect x="684.9" y="197" width="1.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="687.85" y="207.5" ></text>
</g>
<g >
<title>memcpy_orig (3,914,338 samples, 0.13%)</title><rect x="582.6" y="213" width="1.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="585.61" y="223.5" ></text>
</g>
<g >
<title>map_benchmark (2,906,695,609 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >map_benchmark</text>
</g>
<g >
<title>bprm_execve (505,594 samples, 0.02%)</title><rect x="11.0" y="229" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="14.01" y="239.5" ></text>
</g>
<g >
<title>map_create (709,928 samples, 0.02%)</title><rect x="1189.7" y="229" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.70" y="239.5" ></text>
</g>
<g >
<title>[unknown] (3,003,962 samples, 0.10%)</title><rect x="10.0" y="309" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (5,894,993 samples, 0.20%)</title><rect x="811.1" y="229" width="2.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="814.13" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_execve (505,594 samples, 0.02%)</title><rect x="11.0" y="261" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="14.01" y="271.5" ></text>
</g>
<g >
<title>vmemdup_user (372,302,427 samples, 12.81%)</title><rect x="605.8" y="213" width="151.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="608.83" y="223.5" >vmemdup_user</text>
</g>
<g >
<title>__check_object_size (16,016,111 samples, 0.55%)</title><rect x="222.6" y="229" width="6.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="225.61" y="239.5" ></text>
</g>
<g >
<title>timekeeping_advance (797,829 samples, 0.03%)</title><rect x="1046.6" y="37" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1049.55" y="47.5" ></text>
</g>
<g >
<title>____fput (550,321 samples, 0.02%)</title><rect x="1188.9" y="213" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1191.91" y="223.5" ></text>
</g>
<g >
<title>elf64_getehdr (656,381 samples, 0.02%)</title><rect x="10.7" y="277" width="0.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="13.75" y="287.5" ></text>
</g>
<g >
<title>__sys_bpf (1,294,905,255 samples, 44.55%)</title><rect x="231.3" y="229" width="525.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="234.29" y="239.5" >__sys_bpf</text>
</g>
<g >
<title>__x64_sys_bpf (1,387,335 samples, 0.05%)</title><rect x="1189.4" y="261" width="0.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1192.42" y="271.5" ></text>
</g>
<g >
<title>scheduler_tick (816,729 samples, 0.03%)</title><rect x="51.9" y="149" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="54.93" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_bpf (1,415,289,962 samples, 48.69%)</title><rect x="222.6" y="245" width="574.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="225.61" y="255.5" >__x64_sys_bpf</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (797,829 samples, 0.03%)</title><rect x="1046.6" y="181" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1049.55" y="191.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (9,828,800 samples, 0.34%)</title><rect x="1076.9" y="245" width="4.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1079.86" y="255.5" ></text>
</g>
<g >
<title>_copy_from_user (5,143,341 samples, 0.18%)</title><rect x="757.0" y="229" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="759.97" y="239.5" ></text>
</g>
<g >
<title>task_work_run (550,321 samples, 0.02%)</title><rect x="1188.9" y="229" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1191.91" y="239.5" ></text>
</g>
<g >
<title>_dl_map_object (1,208,569 samples, 0.04%)</title><rect x="10.0" y="277" width="0.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,960,675 samples, 0.24%)</title><rect x="52.3" y="277" width="2.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="55.26" y="287.5" ></text>
</g>
<g >
<title>tick_sched_timer (797,829 samples, 0.03%)</title><rect x="1046.6" y="101" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1049.55" y="111.5" ></text>
</g>
<g >
<title>tick_sched_handle (819,425 samples, 0.03%)</title><rect x="202.2" y="149" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="205.23" y="159.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (816,729 samples, 0.03%)</title><rect x="51.9" y="261" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="54.93" y="271.5" ></text>
</g>
<g >
<title>_copy_from_user (3,014,865 samples, 0.10%)</title><rect x="683.6" y="197" width="1.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="686.63" y="207.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (17,840,042 samples, 0.61%)</title><rect x="435.2" y="181" width="7.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="438.25" y="191.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (816,729 samples, 0.03%)</title><rect x="51.9" y="213" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="54.93" y="223.5" ></text>
</g>
<g >
<title>kfree (11,071,214 samples, 0.38%)</title><rect x="1062.6" y="197" width="4.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1065.62" y="207.5" ></text>
</g>
<g >
<title>kfree (3,818,425 samples, 0.13%)</title><rect x="476.6" y="213" width="1.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="479.63" y="223.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (550,321 samples, 0.02%)</title><rect x="1188.9" y="261" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1191.91" y="271.5" ></text>
</g>
<g >
<title>mmap64 (1,208,569 samples, 0.04%)</title><rect x="10.0" y="261" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (797,829 samples, 0.03%)</title><rect x="1046.6" y="165" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1049.55" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_close (694,873 samples, 0.02%)</title><rect x="11.2" y="261" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="14.22" y="271.5" ></text>
</g>
<g >
<title>__kmalloc_node (6,702,955 samples, 0.23%)</title><rect x="678.1" y="197" width="2.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="681.13" y="207.5" ></text>
</g>
<g >
<title>tick_sched_timer (819,425 samples, 0.03%)</title><rect x="202.2" y="165" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="205.23" y="175.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (505,594 samples, 0.02%)</title><rect x="11.0" y="245" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="14.01" y="255.5" ></text>
</g>
<g >
<title>security_bpf (7,047,210 samples, 0.24%)</title><rect x="603.0" y="213" width="2.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="605.97" y="223.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (2,218,288 samples, 0.08%)</title><rect x="573.1" y="181" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="576.05" y="191.5" ></text>
</g>
<g >
<title>kvmalloc_node (3,812,930 samples, 0.13%)</title><rect x="777.2" y="229" width="1.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="780.25" y="239.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (3,109,694 samples, 0.11%)</title><rect x="488.5" y="197" width="1.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="491.49" y="207.5" ></text>
</g>
<g >
<title>should_failslab (708,735 samples, 0.02%)</title><rect x="752.6" y="165" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="755.64" y="175.5" ></text>
</g>
<g >
<title>task_tick_fair (816,729 samples, 0.03%)</title><rect x="51.9" y="133" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="54.93" y="143.5" ></text>
</g>
<g >
<title>update_cfs_group (819,425 samples, 0.03%)</title><rect x="202.2" y="85" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="205.23" y="95.5" ></text>
</g>
<g >
<title>path_put (6,194,105 samples, 0.21%)</title><rect x="1054.2" y="181" width="2.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1057.16" y="191.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (5,397,843 samples, 0.19%)</title><rect x="578.6" y="197" width="2.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="581.58" y="207.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (819,425 samples, 0.03%)</title><rect x="202.2" y="213" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="205.23" y="223.5" ></text>
</g>
<g >
<title>memset_orig (11,384,385 samples, 0.39%)</title><rect x="574.0" y="181" width="4.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="576.95" y="191.5" ></text>
</g>
<g >
<title>__kmalloc_node (149,464,599 samples, 5.14%)</title><rect x="692.2" y="181" width="60.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="695.25" y="191.5" >__kmal..</text>
</g>
<g >
<title>__fdget (40,637,748 samples, 1.40%)</title><rect x="360.6" y="213" width="16.4" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="363.55" y="223.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (66,850,729 samples, 2.30%)</title><rect x="541.6" y="181" width="27.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="544.63" y="191.5" >_..</text>
</g>
<g >
<title>unroll_tree_refs (14,638,706 samples, 0.50%)</title><rect x="1056.7" y="181" width="5.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1059.68" y="191.5" ></text>
</g>
<g >
<title>update_wall_time (797,829 samples, 0.03%)</title><rect x="1046.6" y="53" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1049.55" y="63.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (819,425 samples, 0.03%)</title><rect x="202.2" y="181" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="205.23" y="191.5" ></text>
</g>
<g >
<title>kvfree (122,760,976 samples, 4.22%)</title><rect x="478.2" y="213" width="49.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="481.18" y="223.5" >kvfree</text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (10,543,983 samples, 0.36%)</title><rect x="1087.3" y="277" width="4.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1090.35" y="287.5" ></text>
</g>
<g >
<title>__fdget (5,371,378 samples, 0.18%)</title><rect x="229.1" y="229" width="2.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="232.11" y="239.5" ></text>
</g>
<g >
<title>bpf_prog_load (677,407 samples, 0.02%)</title><rect x="1189.4" y="229" width="0.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1192.42" y="239.5" ></text>
</g>
<g >
<title>load_elf_binary (505,594 samples, 0.02%)</title><rect x="11.0" y="213" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="14.01" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (592,269 samples, 0.02%)</title><rect x="10.0" y="245" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (387,899 samples, 0.01%)</title><rect x="11.0" y="165" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="14.01" y="175.5" ></text>
</g>
<g >
<title>_copy_to_user (5,750,737 samples, 0.20%)</title><rect x="390.7" y="213" width="2.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="393.69" y="223.5" ></text>
</g>
<g >
<title>kvmalloc_node (166,177,473 samples, 5.72%)</title><rect x="688.6" y="197" width="67.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="691.57" y="207.5" >kvmallo..</text>
</g>
<g >
<title>memchr_inv (34,716,736 samples, 1.19%)</title><rect x="778.8" y="229" width="14.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="781.80" y="239.5" ></text>
</g>
<g >
<title>__dentry_kill (550,321 samples, 0.02%)</title><rect x="1188.9" y="181" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1191.91" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,542,798,501 samples, 87.48%)</title><rect x="55.1" y="277" width="1032.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="58.09" y="287.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>htab_map_hash (38,832,683 samples, 1.34%)</title><rect x="410.3" y="197" width="15.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="413.31" y="207.5" ></text>
</g>
<g >
<title>__check_heap_object (10,564,463 samples, 0.36%)</title><rect x="612.8" y="197" width="4.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="615.83" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (550,321 samples, 0.02%)</title><rect x="1188.9" y="277" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.91" y="287.5" ></text>
</g>
<g >
<title>path_put (1,605,249 samples, 0.06%)</title><rect x="1067.1" y="197" width="0.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1070.11" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (550,321 samples, 0.02%)</title><rect x="1188.9" y="293" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1191.91" y="303.5" ></text>
</g>
<g >
<title>__cond_resched (706,759 samples, 0.02%)</title><rect x="541.3" y="181" width="0.3" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="544.34" y="191.5" ></text>
</g>
<g >
<title>all (2,906,731,250 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>vmemdup_user (6,067,587 samples, 0.21%)</title><rect x="794.7" y="229" width="2.5" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="797.69" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (694,873 samples, 0.02%)</title><rect x="11.2" y="293" width="0.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="14.22" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (819,425 samples, 0.03%)</title><rect x="202.2" y="245" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="205.23" y="255.5" ></text>
</g>
<g >
<title>__check_heap_object (49,932,156 samples, 1.72%)</title><rect x="632.4" y="181" width="20.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="635.42" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,162,110,367 samples, 74.38%)</title><rect x="203.1" y="261" width="877.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="206.14" y="271.5" >do_syscall_64</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (816,729 samples, 0.03%)</title><rect x="51.9" y="277" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="54.93" y="287.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (797,829 samples, 0.03%)</title><rect x="1046.6" y="69" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1049.55" y="79.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (10,435,456 samples, 0.36%)</title><rect x="1083.1" y="261" width="4.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1086.11" y="271.5" ></text>
</g>
<g >
<title>bpf_object__create_maps (722,398 samples, 0.02%)</title><rect x="1189.1" y="309" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1192.13" y="319.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (8,199,275 samples, 0.28%)</title><rect x="468.1" y="213" width="3.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="471.11" y="223.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (616,300 samples, 0.02%)</title><rect x="10.2" y="245" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="13.24" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (505,594 samples, 0.02%)</title><rect x="11.0" y="277" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="14.01" y="287.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (804,603 samples, 0.03%)</title><rect x="383.2" y="213" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="386.24" y="223.5" ></text>
</g>
<g >
<title>migrate_enable (11,278,726 samples, 0.39%)</title><rect x="450.0" y="197" width="4.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="452.98" y="207.5" ></text>
</g>
<g >
<title>__kmem_cache_free (16,251,889 samples, 0.56%)</title><rect x="481.9" y="197" width="6.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="484.89" y="207.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (592,269 samples, 0.02%)</title><rect x="10.0" y="213" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (9,133,870 samples, 0.31%)</title><rect x="731.7" y="149" width="3.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="734.71" y="159.5" ></text>
</g>
<g >
<title>_copy_from_user (17,546,796 samples, 0.60%)</title><rect x="383.6" y="213" width="7.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="386.57" y="223.5" ></text>
</g>
<g >
<title>mntput (4,627,594 samples, 0.16%)</title><rect x="1052.3" y="181" width="1.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1055.28" y="191.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (3,628,052 samples, 0.12%)</title><rect x="802.8" y="245" width="1.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="805.80" y="255.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (6,814,122 samples, 0.23%)</title><rect x="823.9" y="213" width="2.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="826.92" y="223.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (12,774,382 samples, 0.44%)</title><rect x="471.4" y="213" width="5.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="474.44" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (819,425 samples, 0.03%)</title><rect x="202.2" y="197" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="205.23" y="207.5" ></text>
</g>
<g >
<title>__kmalloc_node (112,536,425 samples, 3.87%)</title><rect x="532.9" y="197" width="45.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="535.89" y="207.5" >__km..</text>
</g>
<g >
<title>__fput (550,321 samples, 0.02%)</title><rect x="1188.9" y="197" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1191.91" y="207.5" ></text>
</g>
<g >
<title>syscall_exit_work (125,927,478 samples, 4.33%)</title><rect x="1022.5" y="229" width="51.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1025.49" y="239.5" >sysca..</text>
</g>
<g >
<title>amd_clear_divider (13,914,847 samples, 0.48%)</title><rect x="797.2" y="245" width="5.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="800.15" y="255.5" ></text>
</g>
<g >
<title>memcmp (10,723,270 samples, 0.37%)</title><rect x="442.5" y="181" width="4.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="445.49" y="191.5" ></text>
</g>
<g >
<title>is_vmalloc_addr (4,600,252 samples, 0.16%)</title><rect x="686.7" y="197" width="1.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="689.71" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (709,928 samples, 0.02%)</title><rect x="1189.7" y="117" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1192.70" y="127.5" ></text>
</g>
<g >
<title>kmalloc_slab (6,010,415 samples, 0.21%)</title><rect x="753.6" y="181" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="756.59" y="191.5" ></text>
</g>
<g >
<title>bpf_prog_select_runtime (677,407 samples, 0.02%)</title><rect x="1189.4" y="213" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1192.42" y="223.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (8,165,487 samples, 0.28%)</title><rect x="766.2" y="229" width="3.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="769.19" y="239.5" ></text>
</g>
<g >
<title>bitmap_find_next_zero_area_off (677,407 samples, 0.02%)</title><rect x="1189.4" y="165" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1192.42" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,387,335 samples, 0.05%)</title><rect x="1189.4" y="293" width="0.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1192.42" y="303.5" ></text>
</g>
<g >
<title>_copy_to_user (5,938,385 samples, 0.20%)</title><rect x="759.1" y="229" width="2.4" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="762.05" y="239.5" ></text>
</g>
<g >
<title>__kmem_cache_free (74,165,707 samples, 2.55%)</title><rect x="497.9" y="181" width="30.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="500.91" y="191.5" >__..</text>
</g>
<g >
<title>kfree (10,307,678 samples, 0.35%)</title><rect x="1048.1" y="181" width="4.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1051.10" y="191.5" ></text>
</g>
<g >
<title>update_process_times (816,729 samples, 0.03%)</title><rect x="51.9" y="165" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="54.93" y="175.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (709,928 samples, 0.02%)</title><rect x="1189.7" y="165" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1192.70" y="175.5" ></text>
</g>
<g >
<title>__libc_start_call_main (2,900,336,720 samples, 99.78%)</title><rect x="11.5" y="309" width="1177.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="14.50" y="319.5" >__libc_start_call_main</text>
</g>
<g >
<title>tick_sched_do_timer (797,829 samples, 0.03%)</title><rect x="1046.6" y="85" width="0.3" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1049.55" y="95.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (11,259,809 samples, 0.39%)</title><rect x="1017.0" y="229" width="4.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1020.03" y="239.5" ></text>
</g>
<g >
<title>bpf_map_lookup_elem (33,027,288 samples, 1.14%)</title><rect x="11.5" y="293" width="13.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="14.50" y="303.5" ></text>
</g>
<g >
<title>unroll_tree_refs (6,964,996 samples, 0.24%)</title><rect x="1067.8" y="197" width="2.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1070.76" y="207.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (3,916,279 samples, 0.13%)</title><rect x="1020.0" y="213" width="1.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1023.01" y="223.5" ></text>
</g>
<g >
<title>elf_map (387,899 samples, 0.01%)</title><rect x="11.0" y="197" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.01" y="207.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (816,729 samples, 0.03%)</title><rect x="51.9" y="245" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="54.93" y="255.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_node (1,647,151 samples, 0.06%)</title><rect x="752.9" y="181" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="755.93" y="191.5" ></text>
</g>
<g >
<title>__fget_light (3,013,724 samples, 0.10%)</title><rect x="377.0" y="213" width="1.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="380.05" y="223.5" ></text>
</g>
<g >
<title>rep_movs_alternative (2,297,237 samples, 0.08%)</title><rect x="756.0" y="197" width="1.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="759.03" y="207.5" ></text>
</g>
<g >
<title>update_process_times (819,425 samples, 0.03%)</title><rect x="202.2" y="133" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="205.23" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (592,269 samples, 0.02%)</title><rect x="10.0" y="229" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>vm_mmap (387,899 samples, 0.01%)</title><rect x="11.0" y="181" width="0.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="14.01" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (505,594 samples, 0.02%)</title><rect x="11.0" y="293" width="0.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="14.01" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (819,425 samples, 0.03%)</title><rect x="202.2" y="229" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="205.23" y="239.5" ></text>
</g>
<g >
<title>memset_orig (19,018,117 samples, 0.65%)</title><rect x="744.9" y="165" width="7.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="747.92" y="175.5" ></text>
</g>
<g >
<title>scheduler_tick (819,425 samples, 0.03%)</title><rect x="202.2" y="117" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="205.23" y="127.5" ></text>
</g>
<g >
<title>tick_sched_handle (816,729 samples, 0.03%)</title><rect x="51.9" y="181" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="54.93" y="191.5" ></text>
</g>
<g >
<title>__virt_addr_valid (23,060,643 samples, 0.79%)</title><rect x="344.4" y="197" width="9.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="347.44" y="207.5" ></text>
</g>
<g >
<title>_dlfo_sort_mappings (633,418 samples, 0.02%)</title><rect x="10.5" y="277" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="13.49" y="287.5" ></text>
</g>
<g >
<title>__fget_light (40,637,748 samples, 1.40%)</title><rect x="360.6" y="197" width="16.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="363.55" y="207.5" ></text>
</g>
<g >
<title>check_stack_object (33,379,718 samples, 1.15%)</title><rect x="454.6" y="213" width="13.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="457.56" y="223.5" ></text>
</g>
<g >
<title>kmalloc_slab (19,146,856 samples, 0.66%)</title><rect x="735.7" y="165" width="7.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="738.71" y="175.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (550,321 samples, 0.02%)</title><rect x="1188.9" y="245" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1191.91" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,387,335 samples, 0.05%)</title><rect x="1189.4" y="277" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.42" y="287.5" ></text>
</g>
<g >
<title>locks_remove_posix (694,873 samples, 0.02%)</title><rect x="11.2" y="245" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="14.22" y="255.5" ></text>
</g>
<g >
<title>kfree (94,250,209 samples, 3.24%)</title><rect x="489.8" y="197" width="38.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="492.75" y="207.5" >kfree</text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (32,427,397 samples, 1.12%)</title><rect x="813.5" y="229" width="13.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="816.52" y="239.5" ></text>
</g>
<g >
<title>__sys_bpf (1,387,335 samples, 0.05%)</title><rect x="1189.4" y="245" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.42" y="255.5" ></text>
</g>
<g >
<title>migrate_enable (4,532,772 samples, 0.16%)</title><rect x="589.4" y="213" width="1.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="592.45" y="223.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (55,207,144 samples, 1.90%)</title><rect x="804.3" y="245" width="22.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="807.28" y="255.5" >s..</text>
</g>
<g >
<title>migrate_disable (12,929,169 samples, 0.44%)</title><rect x="584.2" y="213" width="5.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="587.20" y="223.5" ></text>
</g>
<g >
<title>bpf_map_copy_value (151,580,030 samples, 5.21%)</title><rect x="393.0" y="213" width="61.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="396.03" y="223.5" >bpf_ma..</text>
</g>
<g >
<title>__alloc_pages (709,928 samples, 0.02%)</title><rect x="1189.7" y="133" width="0.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1192.70" y="143.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_array (1,415,103 samples, 0.05%)</title><rect x="202.6" y="261" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="205.56" y="271.5" ></text>
</g>
<g >
<title>__kmalloc_node (1,512,344 samples, 0.05%)</title><rect x="378.3" y="213" width="0.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="381.27" y="223.5" ></text>
</g>
<g >
<title>alloc_pages (709,928 samples, 0.02%)</title><rect x="1189.7" y="149" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1192.70" y="159.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (233,543,193 samples, 8.03%)</title><rect x="1091.6" y="277" width="94.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1094.63" y="287.5" >syscall_ret..</text>
</g>
<g >
<title>hrtimer_interrupt (816,729 samples, 0.03%)</title><rect x="51.9" y="229" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="54.93" y="239.5" ></text>
</g>
<g >
<title>htab_map_lookup_elem (51,151,797 samples, 1.76%)</title><rect x="426.1" y="197" width="20.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="429.08" y="207.5" ></text>
</g>
<g >
<title>update_min_vruntime (816,729 samples, 0.03%)</title><rect x="51.9" y="117" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="54.93" y="127.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (110,223,394 samples, 3.79%)</title><rect x="1025.8" y="213" width="44.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1028.85" y="223.5" >__au..</text>
</g>
<g >
<title>kvmalloc_node (133,783,372 samples, 4.60%)</title><rect x="528.0" y="213" width="54.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="531.01" y="223.5" >kvmal..</text>
</g>
<g >
<title>audit_reset_context (83,626,634 samples, 2.88%)</title><rect x="1028.7" y="197" width="33.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1031.67" y="207.5" >au..</text>
</g>
<g >
<title>__kmem_cache_alloc_node (86,402,703 samples, 2.97%)</title><rect x="700.6" y="165" width="35.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="703.63" y="175.5" >__..</text>
</g>
<g >
<title>syscall (2,840,251,409 samples, 97.71%)</title><rect x="33.4" y="293" width="1153.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="36.42" y="303.5" >syscall</text>
</g>
<g >
<title>down_write_killable (387,899 samples, 0.01%)</title><rect x="11.0" y="149" width="0.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="14.01" y="159.5" ></text>
</g>
<g >
<title>[unknown] (2,498,368 samples, 0.09%)</title><rect x="10.0" y="293" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>_start (550,321 samples, 0.02%)</title><rect x="1188.9" y="309" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1191.91" y="319.5" ></text>
</g>
<g >
<title>htab_map_alloc (709,928 samples, 0.02%)</title><rect x="1189.7" y="213" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1192.70" y="223.5" ></text>
</g>
<g >
<title>kmalloc_slab (10,552,003 samples, 0.36%)</title><rect x="568.8" y="181" width="4.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="571.77" y="191.5" ></text>
</g>
<g >
<title>bpf_check_uarg_tail_zero (11,640,622 samples, 0.40%)</title><rect x="761.5" y="229" width="4.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="764.47" y="239.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (5,560,381 samples, 0.19%)</title><rect x="1080.9" y="261" width="2.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1083.85" y="271.5" ></text>
</g>
<g >
<title>tick_sched_timer (816,729 samples, 0.03%)</title><rect x="51.9" y="197" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="54.93" y="207.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (797,829 samples, 0.03%)</title><rect x="1046.6" y="133" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1049.55" y="143.5" ></text>
</g>
<g >
<title>should_failslab (707,510 samples, 0.02%)</title><rect x="735.4" y="149" width="0.3" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="738.42" y="159.5" ></text>
</g>
<g >
<title>__bpf_map_area_alloc (709,928 samples, 0.02%)</title><rect x="1189.7" y="181" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1192.70" y="191.5" ></text>
</g>
<g >
<title>__sys_bpf (12,673,278 samples, 0.44%)</title><rect x="217.5" y="245" width="5.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="220.47" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_work (8,005,195 samples, 0.28%)</title><rect x="1073.6" y="245" width="3.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1076.62" y="255.5" ></text>
</g>
<g >
<title>syscall@plt (6,082,127 samples, 0.21%)</title><rect x="1186.4" y="293" width="2.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1189.44" y="303.5" ></text>
</g>
<g >
<title>dput (3,012,515 samples, 0.10%)</title><rect x="1046.9" y="181" width="1.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1049.87" y="191.5" ></text>
</g>
<g >
<title>lookup_nulls_elem_raw (7,735,154 samples, 0.27%)</title><rect x="446.8" y="197" width="3.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="449.84" y="207.5" ></text>
</g>
<g >
<title>__check_object_size (150,299,196 samples, 5.17%)</title><rect x="617.1" y="197" width="61.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="620.11" y="207.5" >__chec..</text>
</g>
<g >
<title>bpf_map_area_alloc (709,928 samples, 0.02%)</title><rect x="1189.7" y="197" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1192.70" y="207.5" ></text>
</g>
<g >
<title>memcpy (706,591 samples, 0.02%)</title><rect x="582.3" y="213" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="585.32" y="223.5" ></text>
</g>
<g >
<title>bpf_int_jit_compile (677,407 samples, 0.02%)</title><rect x="1189.4" y="197" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1192.42" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (694,873 samples, 0.02%)</title><rect x="11.2" y="277" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="14.22" y="287.5" ></text>
</g>
<g >
<title>kvfree (7,951,180 samples, 0.27%)</title><rect x="774.0" y="229" width="3.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="777.02" y="239.5" ></text>
</g>
<g >
<title>bpf_map_value_size (11,125,711 samples, 0.38%)</title><rect x="769.5" y="229" width="4.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="772.51" y="239.5" ></text>
</g>
<g >
<title>__virt_addr_valid (62,660,390 samples, 2.16%)</title><rect x="652.7" y="181" width="25.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="655.69" y="191.5" >_..</text>
</g>
<g >
<title>__check_heap_object (20,869,388 samples, 0.72%)</title><rect x="336.0" y="197" width="8.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.97" y="207.5" ></text>
</g>
<g >
<title>__check_heap_object (9,557,091 samples, 0.33%)</title><rect x="303.1" y="213" width="3.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="306.10" y="223.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (4,621,035 samples, 0.16%)</title><rect x="566.6" y="165" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="569.61" y="175.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (608,263,348 samples, 20.93%)</title><rect x="826.7" y="245" width="246.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="829.69" y="255.5" >syscall_exit_to_user_mode</text>
</g>
<g >
<title>main (20,975,896 samples, 0.72%)</title><rect x="24.9" y="293" width="8.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="27.91" y="303.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (2,199,725 samples, 0.08%)</title><rect x="1021.6" y="229" width="0.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1024.60" y="239.5" ></text>
</g>
<g >
<title>security_bpf (4,435,239 samples, 0.15%)</title><rect x="792.9" y="229" width="1.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="795.89" y="239.5" ></text>
</g>
<g >
<title>check_stack_object (16,624,446 samples, 0.57%)</title><rect x="353.8" y="197" width="6.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="356.80" y="207.5" ></text>
</g>
<g >
<title>__virt_addr_valid (6,205,235 samples, 0.21%)</title><rect x="380.7" y="213" width="2.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="383.73" y="223.5" ></text>
</g>
<g >
<title>rep_movs_alternative (28,770,721 samples, 0.99%)</title><rect x="591.3" y="213" width="11.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="594.29" y="223.5" ></text>
</g>
<g >
<title>__close (694,873 samples, 0.02%)</title><rect x="11.2" y="309" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.22" y="319.5" ></text>
</g>
</g>
</svg>
